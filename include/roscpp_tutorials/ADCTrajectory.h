// Generated by gencpp from file roscpp_tutorials/ADCTrajectory.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_ADCTRAJECTORY_H
#define ROSCPP_TUTORIALS_MESSAGE_ADCTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/ControlLoopToken.h>
#include <roscpp_tutorials/Trajectory.h>
#include <roscpp_tutorials/VehicleSignalCmd.h>
#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/MsgHeader.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct ADCTrajectory_
{
  typedef ADCTrajectory_<ContainerAllocator> Type;

  ADCTrajectory_()
    : header()
    , token()
    , auto_driving_mode(0)
    , coord_timestamp()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_points()
    , stop_order(0)
    , is_replan(false)
    , speed_mode(0)
    , vehicle_signal_cmd()
    , gear(0)
    , scenario_type(0)
    , navigation_map_header()
    , odometry_header()
    , chassis_header()
    , predication_header()
    , ready_stop(false)
    , stop_distance(0.0)  {
    }
  ADCTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , token(_alloc)
    , auto_driving_mode(0)
    , coord_timestamp()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_points(_alloc)
    , stop_order(0)
    , is_replan(false)
    , speed_mode(0)
    , vehicle_signal_cmd(_alloc)
    , gear(0)
    , scenario_type(0)
    , navigation_map_header(_alloc)
    , odometry_header(_alloc)
    , chassis_header(_alloc)
    , predication_header(_alloc)
    , ready_stop(false)
    , stop_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>  _token_type;
  _token_type token;

   typedef uint16_t _auto_driving_mode_type;
  _auto_driving_mode_type auto_driving_mode;

   typedef ros::Time _coord_timestamp_type;
  _coord_timestamp_type coord_timestamp;

   typedef float _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef float _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef  ::roscpp_tutorials::Trajectory_<ContainerAllocator>  _trajectory_points_type;
  _trajectory_points_type trajectory_points;

   typedef uint16_t _stop_order_type;
  _stop_order_type stop_order;

   typedef uint8_t _is_replan_type;
  _is_replan_type is_replan;

   typedef uint16_t _speed_mode_type;
  _speed_mode_type speed_mode;

   typedef  ::roscpp_tutorials::VehicleSignalCmd_<ContainerAllocator>  _vehicle_signal_cmd_type;
  _vehicle_signal_cmd_type vehicle_signal_cmd;

   typedef uint16_t _gear_type;
  _gear_type gear;

   typedef uint16_t _scenario_type_type;
  _scenario_type_type scenario_type;

   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _navigation_map_header_type;
  _navigation_map_header_type navigation_map_header;

   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _odometry_header_type;
  _odometry_header_type odometry_header;

   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _chassis_header_type;
  _chassis_header_type chassis_header;

   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _predication_header_type;
  _predication_header_type predication_header;

   typedef uint8_t _ready_stop_type;
  _ready_stop_type ready_stop;

   typedef float _stop_distance_type;
  _stop_distance_type stop_distance;





  typedef boost::shared_ptr< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ADCTrajectory_

typedef ::roscpp_tutorials::ADCTrajectory_<std::allocator<void> > ADCTrajectory;

typedef boost::shared_ptr< ::roscpp_tutorials::ADCTrajectory > ADCTrajectoryPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::ADCTrajectory const> ADCTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a1bcd166a1dcd030e1d2d5bd8e0b9d0";
  }

  static const char* value(const ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a1bcd166a1dcd03ULL;
  static const uint64_t static_value2 = 0x0e1d2d5bd8e0b9d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/ADCTrajectory";
  }

  static const char* value(const ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
ControlLoopToken token\n\
uint16 auto_driving_mode\n\
time coord_timestamp\n\
float32 total_path_length\n\
float32 total_path_time\n\
Trajectory trajectory_points\n\
uint16 stop_order\n\
bool is_replan\n\
uint16 speed_mode\n\
VehicleSignalCmd vehicle_signal_cmd\n\
uint16 gear\n\
uint16 scenario_type\n\
MsgHeader navigation_map_header\n\
MsgHeader odometry_header\n\
MsgHeader chassis_header\n\
MsgHeader predication_header\n\
bool ready_stop\n\
float32 stop_distance\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/ControlLoopToken\n\
uint64 dcu_token\n\
uint64 hmi_token\n\
uint64 measurable_token\n\
================================================================================\n\
MSG: roscpp_tutorials/Trajectory\n\
float32 probability\n\
TrajectoryPoint[] trajectory_points\n\
================================================================================\n\
MSG: roscpp_tutorials/TrajectoryPoint\n\
PathPoint path_point\n\
float32 v\n\
float32 a\n\
float32 relative_time\n\
float32 da\n\
================================================================================\n\
MSG: roscpp_tutorials/PathPoint\n\
Point3d position\n\
float32 theta\n\
float32 kappa\n\
float32 s\n\
float32 dkappa\n\
float32 ddkappa\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
================================================================================\n\
MSG: roscpp_tutorials/VehicleSignalCmd\n\
    LightCmd light_cmd\n\
    WiperCmd wiper_cmd\n\
    uint16  horn_status\n\
================================================================================\n\
MSG: roscpp_tutorials/LightCmd\n\
uint16 beam_status\n\
uint16 turn_signal\n\
uint16 brake_light_status\n\
================================================================================\n\
MSG: roscpp_tutorials/WiperCmd\n\
uint16 wiper_status    \n\
uint16 wiper_speed\n\
";
  }

  static const char* value(const ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.token);
      stream.next(m.auto_driving_mode);
      stream.next(m.coord_timestamp);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.trajectory_points);
      stream.next(m.stop_order);
      stream.next(m.is_replan);
      stream.next(m.speed_mode);
      stream.next(m.vehicle_signal_cmd);
      stream.next(m.gear);
      stream.next(m.scenario_type);
      stream.next(m.navigation_map_header);
      stream.next(m.odometry_header);
      stream.next(m.chassis_header);
      stream.next(m.predication_header);
      stream.next(m.ready_stop);
      stream.next(m.stop_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::ADCTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "token: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >::stream(s, indent + "  ", v.token);
    s << indent << "auto_driving_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auto_driving_mode);
    s << indent << "coord_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.coord_timestamp);
    s << indent << "total_path_length: ";
    Printer<float>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<float>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "trajectory_points: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_points);
    s << indent << "stop_order: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stop_order);
    s << indent << "is_replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_replan);
    s << indent << "speed_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed_mode);
    s << indent << "vehicle_signal_cmd: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::VehicleSignalCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_signal_cmd);
    s << indent << "gear: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gear);
    s << indent << "scenario_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scenario_type);
    s << indent << "navigation_map_header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.navigation_map_header);
    s << indent << "odometry_header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.odometry_header);
    s << indent << "chassis_header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.chassis_header);
    s << indent << "predication_header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.predication_header);
    s << indent << "ready_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_stop);
    s << indent << "stop_distance: ";
    Printer<float>::stream(s, indent + "  ", v.stop_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_ADCTRAJECTORY_H
