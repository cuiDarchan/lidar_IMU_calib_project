// Generated by gencpp from file roscpp_tutorials/ChassisInfo.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_CHASSISINFO_H
#define ROSCPP_TUTORIALS_MESSAGE_CHASSISINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct ChassisInfo_
{
  typedef ChassisInfo_<ContainerAllocator> Type;

  ChassisInfo_()
    : header()
    , measured_timestamp()
    , speed_mps(0.0)
    , engine_started(false)
    , engine_rpm(0.0)
    , odometer_m(0.0)
    , fuel_range_m(0.0)
    , throttle_percentage(0.0)
    , brake_percentage(0.0)
    , steering_percentage(0.0)
    , steering_torque_nm(0.0)
    , parking_brake(false)
    , hitch_angle(0.0)
    , horn(0)
    , door_open_status(0)
    , wiper_status(0)
    , gear_location(0)
    , drive_gear_position(0)
    , atmt_mode(0)
    , engage_advice(0)
    , driving_mode(0)
    , error_code(0)
    , chassis_error_mask(0)
    , turn_light(0)
    , beam(0)
    , turn_switch(0)
    , total_trip(0.0)
    , driving_mode_request(0)
    , vehicle_run_status(0)
    , ads_reset_request(0)
    , ads_reset_response(0)
    , emergency_stop_flag(0)
    , epb_state(0)
    , epb_ah_state(0)  {
    }
  ChassisInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measured_timestamp()
    , speed_mps(0.0)
    , engine_started(false)
    , engine_rpm(0.0)
    , odometer_m(0.0)
    , fuel_range_m(0.0)
    , throttle_percentage(0.0)
    , brake_percentage(0.0)
    , steering_percentage(0.0)
    , steering_torque_nm(0.0)
    , parking_brake(false)
    , hitch_angle(0.0)
    , horn(0)
    , door_open_status(0)
    , wiper_status(0)
    , gear_location(0)
    , drive_gear_position(0)
    , atmt_mode(0)
    , engage_advice(0)
    , driving_mode(0)
    , error_code(0)
    , chassis_error_mask(0)
    , turn_light(0)
    , beam(0)
    , turn_switch(0)
    , total_trip(0.0)
    , driving_mode_request(0)
    , vehicle_run_status(0)
    , ads_reset_request(0)
    , ads_reset_response(0)
    , emergency_stop_flag(0)
    , epb_state(0)
    , epb_ah_state(0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _measured_timestamp_type;
  _measured_timestamp_type measured_timestamp;

   typedef float _speed_mps_type;
  _speed_mps_type speed_mps;

   typedef uint8_t _engine_started_type;
  _engine_started_type engine_started;

   typedef float _engine_rpm_type;
  _engine_rpm_type engine_rpm;

   typedef float _odometer_m_type;
  _odometer_m_type odometer_m;

   typedef float _fuel_range_m_type;
  _fuel_range_m_type fuel_range_m;

   typedef float _throttle_percentage_type;
  _throttle_percentage_type throttle_percentage;

   typedef float _brake_percentage_type;
  _brake_percentage_type brake_percentage;

   typedef float _steering_percentage_type;
  _steering_percentage_type steering_percentage;

   typedef float _steering_torque_nm_type;
  _steering_torque_nm_type steering_torque_nm;

   typedef uint8_t _parking_brake_type;
  _parking_brake_type parking_brake;

   typedef float _hitch_angle_type;
  _hitch_angle_type hitch_angle;

   typedef uint16_t _horn_type;
  _horn_type horn;

   typedef uint16_t _door_open_status_type;
  _door_open_status_type door_open_status;

   typedef uint16_t _wiper_status_type;
  _wiper_status_type wiper_status;

   typedef uint16_t _gear_location_type;
  _gear_location_type gear_location;

   typedef uint16_t _drive_gear_position_type;
  _drive_gear_position_type drive_gear_position;

   typedef uint16_t _atmt_mode_type;
  _atmt_mode_type atmt_mode;

   typedef uint16_t _engage_advice_type;
  _engage_advice_type engage_advice;

   typedef uint16_t _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef uint16_t _error_code_type;
  _error_code_type error_code;

   typedef int32_t _chassis_error_mask_type;
  _chassis_error_mask_type chassis_error_mask;

   typedef uint16_t _turn_light_type;
  _turn_light_type turn_light;

   typedef uint16_t _beam_type;
  _beam_type beam;

   typedef uint16_t _turn_switch_type;
  _turn_switch_type turn_switch;

   typedef float _total_trip_type;
  _total_trip_type total_trip;

   typedef uint16_t _driving_mode_request_type;
  _driving_mode_request_type driving_mode_request;

   typedef uint16_t _vehicle_run_status_type;
  _vehicle_run_status_type vehicle_run_status;

   typedef uint16_t _ads_reset_request_type;
  _ads_reset_request_type ads_reset_request;

   typedef uint16_t _ads_reset_response_type;
  _ads_reset_response_type ads_reset_response;

   typedef uint16_t _emergency_stop_flag_type;
  _emergency_stop_flag_type emergency_stop_flag;

   typedef uint16_t _epb_state_type;
  _epb_state_type epb_state;

   typedef uint16_t _epb_ah_state_type;
  _epb_ah_state_type epb_ah_state;





  typedef boost::shared_ptr< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisInfo_

typedef ::roscpp_tutorials::ChassisInfo_<std::allocator<void> > ChassisInfo;

typedef boost::shared_ptr< ::roscpp_tutorials::ChassisInfo > ChassisInfoPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::ChassisInfo const> ChassisInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2119e6dd66cbdb3287375d4c283fcbc0";
  }

  static const char* value(const ::roscpp_tutorials::ChassisInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2119e6dd66cbdb32ULL;
  static const uint64_t static_value2 = 0x87375d4c283fcbc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/ChassisInfo";
  }

  static const char* value(const ::roscpp_tutorials::ChassisInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
time measured_timestamp\n\
float32 speed_mps\n\
bool engine_started\n\
float32 engine_rpm\n\
float32 odometer_m\n\
float32 fuel_range_m\n\
float32 throttle_percentage\n\
float32 brake_percentage\n\
float32 steering_percentage\n\
float32 steering_torque_nm\n\
bool parking_brake\n\
float32 hitch_angle\n\
uint16 horn\n\
uint16 door_open_status\n\
uint16 wiper_status\n\
uint16 gear_location\n\
uint16 drive_gear_position\n\
uint16 atmt_mode\n\
uint16 engage_advice\n\
uint16 driving_mode\n\
uint16 error_code\n\
int32 chassis_error_mask\n\
uint16 turn_light\n\
uint16 beam\n\
uint16 turn_switch\n\
float32 total_trip\n\
uint16 driving_mode_request\n\
uint16 vehicle_run_status\n\
uint16 ads_reset_request\n\
uint16 ads_reset_response\n\
uint16 emergency_stop_flag\n\
uint16 epb_state\n\
uint16 epb_ah_state\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::ChassisInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measured_timestamp);
      stream.next(m.speed_mps);
      stream.next(m.engine_started);
      stream.next(m.engine_rpm);
      stream.next(m.odometer_m);
      stream.next(m.fuel_range_m);
      stream.next(m.throttle_percentage);
      stream.next(m.brake_percentage);
      stream.next(m.steering_percentage);
      stream.next(m.steering_torque_nm);
      stream.next(m.parking_brake);
      stream.next(m.hitch_angle);
      stream.next(m.horn);
      stream.next(m.door_open_status);
      stream.next(m.wiper_status);
      stream.next(m.gear_location);
      stream.next(m.drive_gear_position);
      stream.next(m.atmt_mode);
      stream.next(m.engage_advice);
      stream.next(m.driving_mode);
      stream.next(m.error_code);
      stream.next(m.chassis_error_mask);
      stream.next(m.turn_light);
      stream.next(m.beam);
      stream.next(m.turn_switch);
      stream.next(m.total_trip);
      stream.next(m.driving_mode_request);
      stream.next(m.vehicle_run_status);
      stream.next(m.ads_reset_request);
      stream.next(m.ads_reset_response);
      stream.next(m.emergency_stop_flag);
      stream.next(m.epb_state);
      stream.next(m.epb_ah_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::ChassisInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::ChassisInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measured_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.measured_timestamp);
    s << indent << "speed_mps: ";
    Printer<float>::stream(s, indent + "  ", v.speed_mps);
    s << indent << "engine_started: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_started);
    s << indent << "engine_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.engine_rpm);
    s << indent << "odometer_m: ";
    Printer<float>::stream(s, indent + "  ", v.odometer_m);
    s << indent << "fuel_range_m: ";
    Printer<float>::stream(s, indent + "  ", v.fuel_range_m);
    s << indent << "throttle_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_percentage);
    s << indent << "brake_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.brake_percentage);
    s << indent << "steering_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.steering_percentage);
    s << indent << "steering_torque_nm: ";
    Printer<float>::stream(s, indent + "  ", v.steering_torque_nm);
    s << indent << "parking_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_brake);
    s << indent << "hitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.hitch_angle);
    s << indent << "horn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.horn);
    s << indent << "door_open_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.door_open_status);
    s << indent << "wiper_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wiper_status);
    s << indent << "gear_location: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gear_location);
    s << indent << "drive_gear_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.drive_gear_position);
    s << indent << "atmt_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.atmt_mode);
    s << indent << "engage_advice: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.engage_advice);
    s << indent << "driving_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.driving_mode);
    s << indent << "error_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "chassis_error_mask: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chassis_error_mask);
    s << indent << "turn_light: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.turn_light);
    s << indent << "beam: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.beam);
    s << indent << "turn_switch: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.turn_switch);
    s << indent << "total_trip: ";
    Printer<float>::stream(s, indent + "  ", v.total_trip);
    s << indent << "driving_mode_request: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.driving_mode_request);
    s << indent << "vehicle_run_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicle_run_status);
    s << indent << "ads_reset_request: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ads_reset_request);
    s << indent << "ads_reset_response: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ads_reset_response);
    s << indent << "emergency_stop_flag: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.emergency_stop_flag);
    s << indent << "epb_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.epb_state);
    s << indent << "epb_ah_state: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.epb_ah_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_CHASSISINFO_H
