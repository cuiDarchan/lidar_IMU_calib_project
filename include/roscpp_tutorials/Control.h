// Generated by gencpp from file roscpp_tutorials/Control.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_CONTROL_H
#define ROSCPP_TUTORIALS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/ControlLoopToken.h>
#include <roscpp_tutorials/VehicleSignalCmd.h>
#include <roscpp_tutorials/GearCmd.h>
#include <roscpp_tutorials/PadMessage.h>
#include <roscpp_tutorials/Debug.h>
#include <roscpp_tutorials/EpbCmd.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : header()
    , token()
    , auto_driving_mode(0)
    , actived_timestamp(0)
    , brake(0.0)
    , parking_brake(false)
    , throttle(0.0)
    , steering(0.0)
    , steering_rate(0.0)
    , target_acceleration(0.0)
    , target_speed(0.0)
    , vehicle_signal_cmd()
    , gear_cmd()
    , pad_msg()
    , engage_advice(0)
    , lon_control_mode(0)
    , debug()
    , epb_cmd()  {
    }
  Control_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , token(_alloc)
    , auto_driving_mode(0)
    , actived_timestamp(0)
    , brake(0.0)
    , parking_brake(false)
    , throttle(0.0)
    , steering(0.0)
    , steering_rate(0.0)
    , target_acceleration(0.0)
    , target_speed(0.0)
    , vehicle_signal_cmd(_alloc)
    , gear_cmd(_alloc)
    , pad_msg(_alloc)
    , engage_advice(0)
    , lon_control_mode(0)
    , debug(_alloc)
    , epb_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>  _token_type;
  _token_type token;

   typedef uint16_t _auto_driving_mode_type;
  _auto_driving_mode_type auto_driving_mode;

   typedef uint64_t _actived_timestamp_type;
  _actived_timestamp_type actived_timestamp;

   typedef float _brake_type;
  _brake_type brake;

   typedef uint8_t _parking_brake_type;
  _parking_brake_type parking_brake;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _steering_type;
  _steering_type steering;

   typedef float _steering_rate_type;
  _steering_rate_type steering_rate;

   typedef float _target_acceleration_type;
  _target_acceleration_type target_acceleration;

   typedef float _target_speed_type;
  _target_speed_type target_speed;

   typedef  ::roscpp_tutorials::VehicleSignalCmd_<ContainerAllocator>  _vehicle_signal_cmd_type;
  _vehicle_signal_cmd_type vehicle_signal_cmd;

   typedef  ::roscpp_tutorials::GearCmd_<ContainerAllocator>  _gear_cmd_type;
  _gear_cmd_type gear_cmd;

   typedef  ::roscpp_tutorials::PadMessage_<ContainerAllocator>  _pad_msg_type;
  _pad_msg_type pad_msg;

   typedef uint16_t _engage_advice_type;
  _engage_advice_type engage_advice;

   typedef uint16_t _lon_control_mode_type;
  _lon_control_mode_type lon_control_mode;

   typedef  ::roscpp_tutorials::Debug_<ContainerAllocator>  _debug_type;
  _debug_type debug;

   typedef  ::roscpp_tutorials::EpbCmd_<ContainerAllocator>  _epb_cmd_type;
  _epb_cmd_type epb_cmd;





  typedef boost::shared_ptr< ::roscpp_tutorials::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::roscpp_tutorials::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::roscpp_tutorials::Control > ControlPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7c8594ddcb4e52d57787ce6c327ddde";
  }

  static const char* value(const ::roscpp_tutorials::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7c8594ddcb4e52dULL;
  static const uint64_t static_value2 = 0x57787ce6c327dddeULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Control";
  }

  static const char* value(const ::roscpp_tutorials::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  MsgHeader header\n\
  ControlLoopToken token\n\
  uint16 auto_driving_mode\n\
  uint64 actived_timestamp\n\
  float32 brake\n\
  bool parking_brake\n\
  float32 throttle\n\
  float32 steering\n\
  float32 steering_rate\n\
  float32 target_acceleration\n\
  float32 target_speed\n\
  VehicleSignalCmd vehicle_signal_cmd\n\
  GearCmd gear_cmd\n\
  PadMessage pad_msg\n\
  uint16 engage_advice\n\
  uint16 lon_control_mode\n\
  Debug debug\n\
  EpbCmd epb_cmd\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/ControlLoopToken\n\
uint64 dcu_token\n\
uint64 hmi_token\n\
uint64 measurable_token\n\
================================================================================\n\
MSG: roscpp_tutorials/VehicleSignalCmd\n\
    LightCmd light_cmd\n\
    WiperCmd wiper_cmd\n\
    uint16  horn_status\n\
================================================================================\n\
MSG: roscpp_tutorials/LightCmd\n\
uint16 beam_status\n\
uint16 turn_signal\n\
uint16 brake_light_status\n\
================================================================================\n\
MSG: roscpp_tutorials/WiperCmd\n\
uint16 wiper_status    \n\
uint16 wiper_speed\n\
================================================================================\n\
MSG: roscpp_tutorials/GearCmd\n\
uint16 gear_location\n\
    \n\
uint16 drive_gear_position\n\
    \n\
uint16 gear_box_mode\n\
    \n\
bool gearbox_switch_enable\n\
================================================================================\n\
MSG: roscpp_tutorials/PadMessage\n\
MsgHeader header\n\
uint16 driving_mode\n\
uint16 action\n\
================================================================================\n\
MSG: roscpp_tutorials/Debug\n\
SimpleLonDebug simple_lon_debug\n\
SimpleLatDebug simple_lat_debug\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/SimpleLonDebug\n\
float32 station_reference\n\
float32 station_error\n\
float32 station_error_limited\n\
float32 preview_station_error\n\
float32 speed_reference\n\
float32 speed_error\n\
float32 speed_controller_input_limited\n\
float32 preview_speed_reference\n\
float32 preview_speed_error\n\
float32 preview_acceleration_reference\n\
float32 acceleration_cmd_closeloop\n\
float32 acceleration_cmd\n\
float32 acceleration_lookup\n\
float32 speed_lookup\n\
float32 calibration_value\n\
float32 throttle_cmd\n\
float32 brake_cmd\n\
bool is_full_stop\n\
float32 slope_offset_compensation\n\
float32 current_station\n\
float32 path_remain\n\
float32 auto_model_time\n\
float32 gear_position\n\
bool is_common_stop\n\
float32 current_acc\n\
float32 filtered_acc\n\
float32 lon_controller_status\n\
float32 common_stop_time\n\
float32 common_stop_s\n\
float32 matched_lon_curvature\n\
float32 matched_lon_station\n\
float32 preview_lon_station\n\
float32 preview_lon_curvature\n\
float32 reference_lon_curvature  \n\
float32 acceleration_cmd_feedforward\n\
float32 acceleration_cmd_compensation\n\
float32 acceleration_cmd_correction\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/SimpleLatDebug\n\
float32 lateral_error\n\
float32 ref_heading\n\
float32 heading\n\
float32 heading_error\n\
float32 heading_error_rate\n\
float32 lateral_error_rate\n\
float32 curvature\n\
float32 steer_angle\n\
float32 steer_angle_feedforward\n\
float32 steer_angle_lateral_contribution\n\
float32 steer_angle_lateral_rate_contribution\n\
float32 steer_angle_heading_contribution\n\
float32 steer_angle_heading_rate_contribution\n\
float32 steer_angle_feedback\n\
float32 steering_position\n\
float32 ref_speed\n\
float32 steer_angle_limited\n\
float32 steer_angle_integral\n\
float32 steer_angle_correct\n\
float32 steer_angle_roll_compensate\n\
float32 ref_x\n\
float32 ref_y\n\
float32 real_speed\n\
float32 matrix_k1\n\
float32 matrix_k2\n\
float32 matrix_k3\n\
float32 matrix_k4\n\
float32 matched_lat_acceleration\n\
float32 matched_lat_speed\n\
float32 matched_lat_station\n\
================================================================================\n\
MSG: roscpp_tutorials/EpbCmd\n\
  uint16 epb_mode\n\
  float32 epb_value\n\
  uint16 ah_mode\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.token);
      stream.next(m.auto_driving_mode);
      stream.next(m.actived_timestamp);
      stream.next(m.brake);
      stream.next(m.parking_brake);
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.steering_rate);
      stream.next(m.target_acceleration);
      stream.next(m.target_speed);
      stream.next(m.vehicle_signal_cmd);
      stream.next(m.gear_cmd);
      stream.next(m.pad_msg);
      stream.next(m.engage_advice);
      stream.next(m.lon_control_mode);
      stream.next(m.debug);
      stream.next(m.epb_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Control_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "token: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >::stream(s, indent + "  ", v.token);
    s << indent << "auto_driving_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auto_driving_mode);
    s << indent << "actived_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.actived_timestamp);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "parking_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_brake);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "steering_rate: ";
    Printer<float>::stream(s, indent + "  ", v.steering_rate);
    s << indent << "target_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.target_acceleration);
    s << indent << "target_speed: ";
    Printer<float>::stream(s, indent + "  ", v.target_speed);
    s << indent << "vehicle_signal_cmd: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::VehicleSignalCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_signal_cmd);
    s << indent << "gear_cmd: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::GearCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.gear_cmd);
    s << indent << "pad_msg: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::PadMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.pad_msg);
    s << indent << "engage_advice: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.engage_advice);
    s << indent << "lon_control_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lon_control_mode);
    s << indent << "debug: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Debug_<ContainerAllocator> >::stream(s, indent + "  ", v.debug);
    s << indent << "epb_cmd: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::EpbCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.epb_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_CONTROL_H
