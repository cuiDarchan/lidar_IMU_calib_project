// Generated by gencpp from file roscpp_tutorials/ControlLoopToken.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_CONTROLLOOPTOKEN_H
#define ROSCPP_TUTORIALS_MESSAGE_CONTROLLOOPTOKEN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct ControlLoopToken_
{
  typedef ControlLoopToken_<ContainerAllocator> Type;

  ControlLoopToken_()
    : dcu_token(0)
    , hmi_token(0)
    , measurable_token(0)  {
    }
  ControlLoopToken_(const ContainerAllocator& _alloc)
    : dcu_token(0)
    , hmi_token(0)
    , measurable_token(0)  {
  (void)_alloc;
    }



   typedef uint64_t _dcu_token_type;
  _dcu_token_type dcu_token;

   typedef uint64_t _hmi_token_type;
  _hmi_token_type hmi_token;

   typedef uint64_t _measurable_token_type;
  _measurable_token_type measurable_token;





  typedef boost::shared_ptr< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> const> ConstPtr;

}; // struct ControlLoopToken_

typedef ::roscpp_tutorials::ControlLoopToken_<std::allocator<void> > ControlLoopToken;

typedef boost::shared_ptr< ::roscpp_tutorials::ControlLoopToken > ControlLoopTokenPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::ControlLoopToken const> ControlLoopTokenConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34c178bc3261d78088fee83f3b8f5915";
  }

  static const char* value(const ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34c178bc3261d780ULL;
  static const uint64_t static_value2 = 0x88fee83f3b8f5915ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/ControlLoopToken";
  }

  static const char* value(const ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 dcu_token\n\
uint64 hmi_token\n\
uint64 measurable_token\n\
";
  }

  static const char* value(const ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dcu_token);
      stream.next(m.hmi_token);
      stream.next(m.measurable_token);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlLoopToken_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::ControlLoopToken_<ContainerAllocator>& v)
  {
    s << indent << "dcu_token: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.dcu_token);
    s << indent << "hmi_token: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.hmi_token);
    s << indent << "measurable_token: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.measurable_token);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_CONTROLLOOPTOKEN_H
