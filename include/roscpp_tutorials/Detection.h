// Generated by gencpp from file roscpp_tutorials/Detection.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_DETECTION_H
#define ROSCPP_TUTORIALS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : upper_left_x(0.0)
    , upper_left_y(0.0)
    , lower_right_x(0.0)
    , lower_right_y(0.0)
    , label()
    , confidence(0.0)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : upper_left_x(0.0)
    , upper_left_y(0.0)
    , lower_right_x(0.0)
    , lower_right_y(0.0)
    , label(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef float _upper_left_x_type;
  _upper_left_x_type upper_left_x;

   typedef float _upper_left_y_type;
  _upper_left_y_type upper_left_y;

   typedef float _lower_right_x_type;
  _lower_right_x_type lower_right_x;

   typedef float _lower_right_y_type;
  _lower_right_y_type lower_right_y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::roscpp_tutorials::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::roscpp_tutorials::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::roscpp_tutorials::Detection > DetectionPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6f08522bc375a8f20328ecf03fca751";
  }

  static const char* value(const ::roscpp_tutorials::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6f08522bc375a8fULL;
  static const uint64_t static_value2 = 0x20328ecf03fca751ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Detection";
  }

  static const char* value(const ::roscpp_tutorials::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 upper_left_x\n\
float32 upper_left_y\n\
float32 lower_right_x\n\
float32 lower_right_y\n\
string label\n\
float32 confidence\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.upper_left_x);
      stream.next(m.upper_left_y);
      stream.next(m.lower_right_x);
      stream.next(m.lower_right_y);
      stream.next(m.label);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Detection_<ContainerAllocator>& v)
  {
    s << indent << "upper_left_x: ";
    Printer<float>::stream(s, indent + "  ", v.upper_left_x);
    s << indent << "upper_left_y: ";
    Printer<float>::stream(s, indent + "  ", v.upper_left_y);
    s << indent << "lower_right_x: ";
    Printer<float>::stream(s, indent + "  ", v.lower_right_x);
    s << indent << "lower_right_y: ";
    Printer<float>::stream(s, indent + "  ", v.lower_right_y);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_DETECTION_H
