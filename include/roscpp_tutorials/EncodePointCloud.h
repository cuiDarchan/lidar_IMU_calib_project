// Generated by gencpp from file roscpp_tutorials/EncodePointCloud.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_ENCODEPOINTCLOUD_H
#define ROSCPP_TUTORIALS_MESSAGE_ENCODEPOINTCLOUD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct EncodePointCloud_
{
  typedef EncodePointCloud_<ContainerAllocator> Type;

  EncodePointCloud_()
    : header()
    , frame_id()
    , data()  {
    }
  EncodePointCloud_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_id(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> const> ConstPtr;

}; // struct EncodePointCloud_

typedef ::roscpp_tutorials::EncodePointCloud_<std::allocator<void> > EncodePointCloud;

typedef boost::shared_ptr< ::roscpp_tutorials::EncodePointCloud > EncodePointCloudPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::EncodePointCloud const> EncodePointCloudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "471cf9e22a14ef64ed240693590b3ebe";
  }

  static const char* value(const ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x471cf9e22a14ef64ULL;
  static const uint64_t static_value2 = 0xed240693590b3ebeULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/EncodePointCloud";
  }

  static const char* value(const ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
string frame_id\n\
uint8[] data\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_id);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncodePointCloud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::EncodePointCloud_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_ENCODEPOINTCLOUD_H
