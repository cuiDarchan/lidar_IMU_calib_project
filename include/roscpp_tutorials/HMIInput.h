// Generated by gencpp from file roscpp_tutorials/HMIInput.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_HMIINPUT_H
#define ROSCPP_TUTORIALS_MESSAGE_HMIINPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/WayPoint.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct HMIInput_
{
  typedef HMIInput_<ContainerAllocator> Type;

  HMIInput_()
    : header()
    , token(0)
    , auto_driving_mode_lower(0)
    , auto_driving_mode_upper(0)
    , has_navigation_request(false)
    , has_navigation_starting_position(false)
    , navigation_starting_position()
    , navigation_way_points()  {
      navigation_starting_position.assign(0.0);
  }
  HMIInput_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , token(0)
    , auto_driving_mode_lower(0)
    , auto_driving_mode_upper(0)
    , has_navigation_request(false)
    , has_navigation_starting_position(false)
    , navigation_starting_position()
    , navigation_way_points(_alloc)  {
  (void)_alloc;
      navigation_starting_position.assign(0.0);
  }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _token_type;
  _token_type token;

   typedef uint16_t _auto_driving_mode_lower_type;
  _auto_driving_mode_lower_type auto_driving_mode_lower;

   typedef uint16_t _auto_driving_mode_upper_type;
  _auto_driving_mode_upper_type auto_driving_mode_upper;

   typedef uint8_t _has_navigation_request_type;
  _has_navigation_request_type has_navigation_request;

   typedef uint8_t _has_navigation_starting_position_type;
  _has_navigation_starting_position_type has_navigation_starting_position;

   typedef boost::array<double, 3>  _navigation_starting_position_type;
  _navigation_starting_position_type navigation_starting_position;

   typedef std::vector< ::roscpp_tutorials::WayPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >::other >  _navigation_way_points_type;
  _navigation_way_points_type navigation_way_points;





  typedef boost::shared_ptr< ::roscpp_tutorials::HMIInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::HMIInput_<ContainerAllocator> const> ConstPtr;

}; // struct HMIInput_

typedef ::roscpp_tutorials::HMIInput_<std::allocator<void> > HMIInput;

typedef boost::shared_ptr< ::roscpp_tutorials::HMIInput > HMIInputPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::HMIInput const> HMIInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::HMIInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::HMIInput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::HMIInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::HMIInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a425bdac9783daf3e158cff834493a21";
  }

  static const char* value(const ::roscpp_tutorials::HMIInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa425bdac9783daf3ULL;
  static const uint64_t static_value2 = 0xe158cff834493a21ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/HMIInput";
  }

  static const char* value(const ::roscpp_tutorials::HMIInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  MsgHeader header\n\
  uint64 token\n\
  uint16 auto_driving_mode_lower\n\
  uint16 auto_driving_mode_upper\n\
  bool has_navigation_request\n\
  bool has_navigation_starting_position\n\
  float64[3] navigation_starting_position\n\
  WayPoint[] navigation_way_points\n\
  \n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/WayPoint\n\
\n\
  float64[3] position\n\
  bool has_orientation\n\
  float64[4] orientation\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::HMIInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.token);
      stream.next(m.auto_driving_mode_lower);
      stream.next(m.auto_driving_mode_upper);
      stream.next(m.has_navigation_request);
      stream.next(m.has_navigation_starting_position);
      stream.next(m.navigation_starting_position);
      stream.next(m.navigation_way_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMIInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::HMIInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::HMIInput_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "token: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.token);
    s << indent << "auto_driving_mode_lower: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auto_driving_mode_lower);
    s << indent << "auto_driving_mode_upper: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auto_driving_mode_upper);
    s << indent << "has_navigation_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_navigation_request);
    s << indent << "has_navigation_starting_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_navigation_starting_position);
    s << indent << "navigation_starting_position[]" << std::endl;
    for (size_t i = 0; i < v.navigation_starting_position.size(); ++i)
    {
      s << indent << "  navigation_starting_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.navigation_starting_position[i]);
    }
    s << indent << "navigation_way_points[]" << std::endl;
    for (size_t i = 0; i < v.navigation_way_points.size(); ++i)
    {
      s << indent << "  navigation_way_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.navigation_way_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_HMIINPUT_H
