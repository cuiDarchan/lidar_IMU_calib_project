// Generated by gencpp from file roscpp_tutorials/Heading.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_HEADING_H
#define ROSCPP_TUTORIALS_MESSAGE_HEADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Heading_
{
  typedef Heading_<ContainerAllocator> Type;

  Heading_()
    : header()
    , solution_status(0)
    , position_type(0)
    , length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , reserved(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , station_id()
    , num_sats_tracked(0)
    , num_sats_in_solution(0)
    , num_sats_ele(0)
    , num_sats_l2(0)
    , solution_source(0)
    , extended_solution_status(0)
    , galileo_beidou_sig_mask(0)
    , gps_glonass_sig_mask(0)  {
    }
  Heading_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , solution_status(0)
    , position_type(0)
    , length(0.0)
    , heading(0.0)
    , pitch(0.0)
    , reserved(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , station_id(_alloc)
    , num_sats_tracked(0)
    , num_sats_in_solution(0)
    , num_sats_ele(0)
    , num_sats_l2(0)
    , solution_source(0)
    , extended_solution_status(0)
    , galileo_beidou_sig_mask(0)
    , gps_glonass_sig_mask(0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _solution_status_type;
  _solution_status_type solution_status;

   typedef uint16_t _position_type_type;
  _position_type_type position_type;

   typedef float _length_type;
  _length_type length;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _reserved_type;
  _reserved_type reserved;

   typedef float _heading_std_dev_type;
  _heading_std_dev_type heading_std_dev;

   typedef float _pitch_std_dev_type;
  _pitch_std_dev_type pitch_std_dev;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _station_id_type;
  _station_id_type station_id;

   typedef uint8_t _num_sats_tracked_type;
  _num_sats_tracked_type num_sats_tracked;

   typedef uint8_t _num_sats_in_solution_type;
  _num_sats_in_solution_type num_sats_in_solution;

   typedef uint8_t _num_sats_ele_type;
  _num_sats_ele_type num_sats_ele;

   typedef uint8_t _num_sats_l2_type;
  _num_sats_l2_type num_sats_l2;

   typedef uint8_t _solution_source_type;
  _solution_source_type solution_source;

   typedef uint8_t _extended_solution_status_type;
  _extended_solution_status_type extended_solution_status;

   typedef uint8_t _galileo_beidou_sig_mask_type;
  _galileo_beidou_sig_mask_type galileo_beidou_sig_mask;

   typedef uint8_t _gps_glonass_sig_mask_type;
  _gps_glonass_sig_mask_type gps_glonass_sig_mask;





  typedef boost::shared_ptr< ::roscpp_tutorials::Heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Heading_<ContainerAllocator> const> ConstPtr;

}; // struct Heading_

typedef ::roscpp_tutorials::Heading_<std::allocator<void> > Heading;

typedef boost::shared_ptr< ::roscpp_tutorials::Heading > HeadingPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Heading const> HeadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Heading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Heading_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Heading_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Heading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad3f15d5aa86484f6a458a7fa7c872e2";
  }

  static const char* value(const ::roscpp_tutorials::Heading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad3f15d5aa86484fULL;
  static const uint64_t static_value2 = 0x6a458a7fa7c872e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Heading";
  }

  static const char* value(const ::roscpp_tutorials::Heading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  MsgHeader header\n\
  uint16 solution_status\n\
  uint16 position_type\n\
  float32 length\n\
  float32 heading\n\
  float32 pitch\n\
  float32 reserved\n\
  float32 heading_std_dev\n\
  float32 pitch_std_dev\n\
  string station_id          \n\
  uint8 num_sats_tracked   \n\
  uint8 num_sats_in_solution\n\
  uint8 num_sats_ele\n\
  uint8 num_sats_l2\n\
  uint8 solution_source\n\
  uint8 extended_solution_status\n\
  uint8 galileo_beidou_sig_mask\n\
  uint8 gps_glonass_sig_mask\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Heading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Heading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.solution_status);
      stream.next(m.position_type);
      stream.next(m.length);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.reserved);
      stream.next(m.heading_std_dev);
      stream.next(m.pitch_std_dev);
      stream.next(m.station_id);
      stream.next(m.num_sats_tracked);
      stream.next(m.num_sats_in_solution);
      stream.next(m.num_sats_ele);
      stream.next(m.num_sats_l2);
      stream.next(m.solution_source);
      stream.next(m.extended_solution_status);
      stream.next(m.galileo_beidou_sig_mask);
      stream.next(m.gps_glonass_sig_mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Heading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Heading_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "solution_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.solution_status);
    s << indent << "position_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.position_type);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "reserved: ";
    Printer<float>::stream(s, indent + "  ", v.reserved);
    s << indent << "heading_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.heading_std_dev);
    s << indent << "pitch_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std_dev);
    s << indent << "station_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.station_id);
    s << indent << "num_sats_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sats_tracked);
    s << indent << "num_sats_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sats_in_solution);
    s << indent << "num_sats_ele: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sats_ele);
    s << indent << "num_sats_l2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_sats_l2);
    s << indent << "solution_source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solution_source);
    s << indent << "extended_solution_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extended_solution_status);
    s << indent << "galileo_beidou_sig_mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_beidou_sig_mask);
    s << indent << "gps_glonass_sig_mask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_glonass_sig_mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_HEADING_H
