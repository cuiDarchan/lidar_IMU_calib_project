// Generated by gencpp from file roscpp_tutorials/IMURaw.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_IMURAW_H
#define ROSCPP_TUTORIALS_MESSAGE_IMURAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct IMURaw_
{
  typedef IMURaw_<ContainerAllocator> Type;

  IMURaw_()
    : header()
    , measured_timestamp()
    , linear_acceleration()
    , angular_velocity()  {
      linear_acceleration.assign(0.0);

      angular_velocity.assign(0.0);
  }
  IMURaw_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measured_timestamp()
    , linear_acceleration()
    , angular_velocity()  {
  (void)_alloc;
      linear_acceleration.assign(0.0);

      angular_velocity.assign(0.0);
  }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _measured_timestamp_type;
  _measured_timestamp_type measured_timestamp;

   typedef boost::array<float, 3>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<float, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::roscpp_tutorials::IMURaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::IMURaw_<ContainerAllocator> const> ConstPtr;

}; // struct IMURaw_

typedef ::roscpp_tutorials::IMURaw_<std::allocator<void> > IMURaw;

typedef boost::shared_ptr< ::roscpp_tutorials::IMURaw > IMURawPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::IMURaw const> IMURawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::IMURaw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::IMURaw_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::IMURaw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::IMURaw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4281f2f173e6d50dbfc0262e3af8e246";
  }

  static const char* value(const ::roscpp_tutorials::IMURaw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4281f2f173e6d50dULL;
  static const uint64_t static_value2 = 0xbfc0262e3af8e246ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/IMURaw";
  }

  static const char* value(const ::roscpp_tutorials::IMURaw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
time measured_timestamp\n\
float32[3] linear_acceleration\n\
float32[3] angular_velocity\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::IMURaw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measured_timestamp);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMURaw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::IMURaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::IMURaw_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measured_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.measured_timestamp);
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_IMURAW_H
