// Generated by gencpp from file roscpp_tutorials/Lanemarker.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_LANEMARKER_H
#define ROSCPP_TUTORIALS_MESSAGE_LANEMARKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/LaneParam.h>
#include <roscpp_tutorials/LaneParam.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Lanemarker_
{
  typedef Lanemarker_<ContainerAllocator> Type;

  Lanemarker_()
    : image_lane()
    , world_lane()
    , type(0)
    , type_confidence(0.0)
    , speed_limit(0.0)
    , spatial(0)
    , track_id(0)  {
    }
  Lanemarker_(const ContainerAllocator& _alloc)
    : image_lane(_alloc)
    , world_lane(_alloc)
    , type(0)
    , type_confidence(0.0)
    , speed_limit(0.0)
    , spatial(0)
    , track_id(0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::LaneParam_<ContainerAllocator>  _image_lane_type;
  _image_lane_type image_lane;

   typedef  ::roscpp_tutorials::LaneParam_<ContainerAllocator>  _world_lane_type;
  _world_lane_type world_lane;

   typedef uint16_t _type_type;
  _type_type type;

   typedef float _type_confidence_type;
  _type_confidence_type type_confidence;

   typedef float _speed_limit_type;
  _speed_limit_type speed_limit;

   typedef uint16_t _spatial_type;
  _spatial_type spatial;

   typedef uint32_t _track_id_type;
  _track_id_type track_id;





  typedef boost::shared_ptr< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> const> ConstPtr;

}; // struct Lanemarker_

typedef ::roscpp_tutorials::Lanemarker_<std::allocator<void> > Lanemarker;

typedef boost::shared_ptr< ::roscpp_tutorials::Lanemarker > LanemarkerPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Lanemarker const> LanemarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Lanemarker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f6e4dad2e7007f73e69ce34e34f2ec9";
  }

  static const char* value(const ::roscpp_tutorials::Lanemarker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f6e4dad2e7007f7ULL;
  static const uint64_t static_value2 = 0x3e69ce34e34f2ec9ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Lanemarker";
  }

  static const char* value(const ::roscpp_tutorials::Lanemarker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LaneParam image_lane\n\
\n\
LaneParam world_lane\n\
\n\
uint16 type\n\
\n\
float32 type_confidence\n\
\n\
float32 speed_limit\n\
\n\
uint16 spatial\n\
\n\
uint32 track_id\n\
================================================================================\n\
MSG: roscpp_tutorials/LaneParam\n\
float32 cx_quality\n\
    \n\
float32 start\n\
    \n\
float32 end\n\
    \n\
float32 c0\n\
    \n\
float32 c1\n\
    \n\
float32 c2\n\
    \n\
float32 c3\n\
\n\
Point3d[] samples\n\
    \n\
float32 samples_confidence\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Lanemarker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image_lane);
      stream.next(m.world_lane);
      stream.next(m.type);
      stream.next(m.type_confidence);
      stream.next(m.speed_limit);
      stream.next(m.spatial);
      stream.next(m.track_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lanemarker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Lanemarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Lanemarker_<ContainerAllocator>& v)
  {
    s << indent << "image_lane: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::LaneParam_<ContainerAllocator> >::stream(s, indent + "  ", v.image_lane);
    s << indent << "world_lane: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::LaneParam_<ContainerAllocator> >::stream(s, indent + "  ", v.world_lane);
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "type_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.type_confidence);
    s << indent << "speed_limit: ";
    Printer<float>::stream(s, indent + "  ", v.speed_limit);
    s << indent << "spatial: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.spatial);
    s << indent << "track_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.track_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_LANEMARKER_H
