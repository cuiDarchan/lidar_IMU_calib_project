// Generated by gencpp from file roscpp_tutorials/Localization.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_LOCALIZATION_H
#define ROSCPP_TUTORIALS_MESSAGE_LOCALIZATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/Quaterniond.h>
#include <roscpp_tutorials/Uncertainty.h>
#include <roscpp_tutorials/LocalizationStatus.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Localization_
{
  typedef Localization_<ContainerAllocator> Type;

  Localization_()
    : header()
    , measured_timestamp()
    , position()
    , linear_velocity()
    , linear_acceleration()
    , orientation()
    , heading(0.0)
    , euler_angles()
    , angular_velocity()
    , uncertainty()
    , status()  {
      position.assign(0.0);

      linear_velocity.assign(0.0);

      linear_acceleration.assign(0.0);

      euler_angles.assign(0.0);

      angular_velocity.assign(0.0);
  }
  Localization_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measured_timestamp()
    , position()
    , linear_velocity()
    , linear_acceleration()
    , orientation(_alloc)
    , heading(0.0)
    , euler_angles()
    , angular_velocity()
    , uncertainty(_alloc)
    , status(_alloc)  {
  (void)_alloc;
      position.assign(0.0);

      linear_velocity.assign(0.0);

      linear_acceleration.assign(0.0);

      euler_angles.assign(0.0);

      angular_velocity.assign(0.0);
  }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _measured_timestamp_type;
  _measured_timestamp_type measured_timestamp;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef boost::array<float, 3>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::roscpp_tutorials::Quaterniond_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef float _heading_type;
  _heading_type heading;

   typedef boost::array<float, 3>  _euler_angles_type;
  _euler_angles_type euler_angles;

   typedef boost::array<float, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::roscpp_tutorials::Uncertainty_<ContainerAllocator>  _uncertainty_type;
  _uncertainty_type uncertainty;

   typedef  ::roscpp_tutorials::LocalizationStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::roscpp_tutorials::Localization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Localization_<ContainerAllocator> const> ConstPtr;

}; // struct Localization_

typedef ::roscpp_tutorials::Localization_<std::allocator<void> > Localization;

typedef boost::shared_ptr< ::roscpp_tutorials::Localization > LocalizationPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Localization const> LocalizationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Localization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Localization_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Localization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Localization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Localization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Localization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Localization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Localization_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cf5a1978b9b3423d83a5ceaa5b52f73";
  }

  static const char* value(const ::roscpp_tutorials::Localization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cf5a1978b9b3423ULL;
  static const uint64_t static_value2 = 0xd83a5ceaa5b52f73ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Localization";
  }

  static const char* value(const ::roscpp_tutorials::Localization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
\n\
time measured_timestamp\n\
\n\
float64[3] position\n\
\n\
float32[3] linear_velocity\n\
\n\
float32[3] linear_acceleration\n\
\n\
Quaterniond orientation\n\
\n\
float32 heading\n\
\n\
float32[3] euler_angles\n\
\n\
float32[3] angular_velocity\n\
\n\
Uncertainty uncertainty\n\
\n\
LocalizationStatus status\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Quaterniond\n\
float64 w\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: roscpp_tutorials/Uncertainty\n\
float32[3] position_std_dev\n\
float32[3] velocity_std_dev\n\
float32[3] orientation_std_dev\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/LocalizationStatus\n\
MeasureState fusion_status\n\
MeasureState gnss_status\n\
MeasureState lidar_status\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MeasureState\n\
uint8 NOT_VALID = 0\n\
uint8 NOT_STABLE = 1\n\
uint8 OK = 2\n\
uint8 VALID = 3\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Localization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Localization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measured_timestamp);
      stream.next(m.position);
      stream.next(m.linear_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.orientation);
      stream.next(m.heading);
      stream.next(m.euler_angles);
      stream.next(m.angular_velocity);
      stream.next(m.uncertainty);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Localization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Localization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Localization_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measured_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.measured_timestamp);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "linear_velocity[]" << std::endl;
    for (size_t i = 0; i < v.linear_velocity.size(); ++i)
    {
      s << indent << "  linear_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_velocity[i]);
    }
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration[i]);
    }
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Quaterniond_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "euler_angles[]" << std::endl;
    for (size_t i = 0; i < v.euler_angles.size(); ++i)
    {
      s << indent << "  euler_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler_angles[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
    s << indent << "uncertainty: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Uncertainty_<ContainerAllocator> >::stream(s, indent + "  ", v.uncertainty);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::LocalizationStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_LOCALIZATION_H
