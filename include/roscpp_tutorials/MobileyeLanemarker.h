// Generated by gencpp from file roscpp_tutorials/MobileyeLanemarker.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKER_H
#define ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct MobileyeLanemarker_
{
  typedef MobileyeLanemarker_<ContainerAllocator> Type;

  MobileyeLanemarker_()
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)
    , mark_width(0.0)
    , lane_type(0)
    , quality(0)
    , mode_degree(0)
    , view_range(0.0)
    , view_range_flag(false)  {
    }
  MobileyeLanemarker_(const ContainerAllocator& _alloc)
    : c0(0.0)
    , c1(0.0)
    , c2(0.0)
    , c3(0.0)
    , mark_width(0.0)
    , lane_type(0)
    , quality(0)
    , mode_degree(0)
    , view_range(0.0)
    , view_range_flag(false)  {
  (void)_alloc;
    }



   typedef float _c0_type;
  _c0_type c0;

   typedef float _c1_type;
  _c1_type c1;

   typedef float _c2_type;
  _c2_type c2;

   typedef float _c3_type;
  _c3_type c3;

   typedef float _mark_width_type;
  _mark_width_type mark_width;

   typedef uint16_t _lane_type_type;
  _lane_type_type lane_type;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint16_t _mode_degree_type;
  _mode_degree_type mode_degree;

   typedef float _view_range_type;
  _view_range_type view_range;

   typedef uint8_t _view_range_flag_type;
  _view_range_flag_type view_range_flag;





  typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> const> ConstPtr;

}; // struct MobileyeLanemarker_

typedef ::roscpp_tutorials::MobileyeLanemarker_<std::allocator<void> > MobileyeLanemarker;

typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarker > MobileyeLanemarkerPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarker const> MobileyeLanemarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81e571d34327408bcc5d886166bf97f4";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81e571d34327408bULL;
  static const uint64_t static_value2 = 0xcc5d886166bf97f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/MobileyeLanemarker";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    float32 c0 \n\
    \n\
    float32 c1 \n\
    \n\
    float32 c2 \n\
    \n\
    float32 c3 \n\
    \n\
    float32 mark_width \n\
    \n\
    uint16 lane_type \n\
    \n\
    uint8 quality \n\
    \n\
    uint16 mode_degree \n\
    \n\
    float32 view_range \n\
    \n\
    bool view_range_flag \n\
";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.c0);
      stream.next(m.c1);
      stream.next(m.c2);
      stream.next(m.c3);
      stream.next(m.mark_width);
      stream.next(m.lane_type);
      stream.next(m.quality);
      stream.next(m.mode_degree);
      stream.next(m.view_range);
      stream.next(m.view_range_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobileyeLanemarker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator>& v)
  {
    s << indent << "c0: ";
    Printer<float>::stream(s, indent + "  ", v.c0);
    s << indent << "c1: ";
    Printer<float>::stream(s, indent + "  ", v.c1);
    s << indent << "c2: ";
    Printer<float>::stream(s, indent + "  ", v.c2);
    s << indent << "c3: ";
    Printer<float>::stream(s, indent + "  ", v.c3);
    s << indent << "mark_width: ";
    Printer<float>::stream(s, indent + "  ", v.mark_width);
    s << indent << "lane_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane_type);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "mode_degree: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mode_degree);
    s << indent << "view_range: ";
    Printer<float>::stream(s, indent + "  ", v.view_range);
    s << indent << "view_range_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.view_range_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKER_H
