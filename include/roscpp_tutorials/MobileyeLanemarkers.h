// Generated by gencpp from file roscpp_tutorials/MobileyeLanemarkers.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKERS_H
#define ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/MobileyeLanemarker.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct MobileyeLanemarkers_
{
  typedef MobileyeLanemarkers_<ContainerAllocator> Type;

  MobileyeLanemarkers_()
    : header()
    , measured_timestamp()
    , ref_point1_position(0.0)
    , ref_point1_distance(0.0)
    , ref_point1_validity(false)
    , ref_point2_position(0.0)
    , ref_point2_distance(0.0)
    , ref_point2_validity(false)
    , lanemarkers()
    , lanemarker_num(0)  {
    }
  MobileyeLanemarkers_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measured_timestamp()
    , ref_point1_position(0.0)
    , ref_point1_distance(0.0)
    , ref_point1_validity(false)
    , ref_point2_position(0.0)
    , ref_point2_distance(0.0)
    , ref_point2_validity(false)
    , lanemarkers(_alloc)
    , lanemarker_num(0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _measured_timestamp_type;
  _measured_timestamp_type measured_timestamp;

   typedef float _ref_point1_position_type;
  _ref_point1_position_type ref_point1_position;

   typedef float _ref_point1_distance_type;
  _ref_point1_distance_type ref_point1_distance;

   typedef uint8_t _ref_point1_validity_type;
  _ref_point1_validity_type ref_point1_validity;

   typedef float _ref_point2_position_type;
  _ref_point2_position_type ref_point2_position;

   typedef float _ref_point2_distance_type;
  _ref_point2_distance_type ref_point2_distance;

   typedef uint8_t _ref_point2_validity_type;
  _ref_point2_validity_type ref_point2_validity;

   typedef std::vector< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >::other >  _lanemarkers_type;
  _lanemarkers_type lanemarkers;

   typedef uint8_t _lanemarker_num_type;
  _lanemarker_num_type lanemarker_num;





  typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> const> ConstPtr;

}; // struct MobileyeLanemarkers_

typedef ::roscpp_tutorials::MobileyeLanemarkers_<std::allocator<void> > MobileyeLanemarkers;

typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarkers > MobileyeLanemarkersPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::MobileyeLanemarkers const> MobileyeLanemarkersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b318fb3d28140f893423bc45a5ac36e";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b318fb3d28140f8ULL;
  static const uint64_t static_value2 = 0x93423bc45a5ac36eULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/MobileyeLanemarkers";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    MsgHeader header\n\
     \n\
    time measured_timestamp \n\
    \n\
    float32 ref_point1_position \n\
    \n\
    float32 ref_point1_distance \n\
    \n\
    bool ref_point1_validity \n\
    \n\
    float32 ref_point2_position \n\
    \n\
    float32 ref_point2_distance \n\
    \n\
    bool ref_point2_validity \n\
    \n\
    MobileyeLanemarker[] lanemarkers \n\
    \n\
    uint8 lanemarker_num \n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MobileyeLanemarker\n\
    float32 c0 \n\
    \n\
    float32 c1 \n\
    \n\
    float32 c2 \n\
    \n\
    float32 c3 \n\
    \n\
    float32 mark_width \n\
    \n\
    uint16 lane_type \n\
    \n\
    uint8 quality \n\
    \n\
    uint16 mode_degree \n\
    \n\
    float32 view_range \n\
    \n\
    bool view_range_flag \n\
";
  }

  static const char* value(const ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measured_timestamp);
      stream.next(m.ref_point1_position);
      stream.next(m.ref_point1_distance);
      stream.next(m.ref_point1_validity);
      stream.next(m.ref_point2_position);
      stream.next(m.ref_point2_distance);
      stream.next(m.ref_point2_validity);
      stream.next(m.lanemarkers);
      stream.next(m.lanemarker_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobileyeLanemarkers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::MobileyeLanemarkers_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measured_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.measured_timestamp);
    s << indent << "ref_point1_position: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point1_position);
    s << indent << "ref_point1_distance: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point1_distance);
    s << indent << "ref_point1_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ref_point1_validity);
    s << indent << "ref_point2_position: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point2_position);
    s << indent << "ref_point2_distance: ";
    Printer<float>::stream(s, indent + "  ", v.ref_point2_distance);
    s << indent << "ref_point2_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ref_point2_validity);
    s << indent << "lanemarkers[]" << std::endl;
    for (size_t i = 0; i < v.lanemarkers.size(); ++i)
    {
      s << indent << "  lanemarkers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::MobileyeLanemarker_<ContainerAllocator> >::stream(s, indent + "    ", v.lanemarkers[i]);
    }
    s << indent << "lanemarker_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lanemarker_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_MOBILEYELANEMARKERS_H
