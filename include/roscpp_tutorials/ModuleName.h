// Generated by gencpp from file roscpp_tutorials/ModuleName.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_MODULENAME_H
#define ROSCPP_TUTORIALS_MESSAGE_MODULENAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct ModuleName_
{
  typedef ModuleName_<ContainerAllocator> Type;

  ModuleName_()
    {
    }
  ModuleName_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





  enum {
    CAN_MOBILEYE = 1u,
    CAN_METOAK = 2u,
    CAN_CONTI_RADAR = 3u,
    CAN_ULTRASONIC_RADAR = 4u,
    DRIVER_CAMEAR = 5u,
    DRIVER_LIDAR = 6u,
    DRIVER_LIVOX = 7u,
    PERCEPTION = 1001u,
    PERCEPTION_CAN = 1002u,
    PERCEPTION_LIDAR = 1003u,
    PERCEPTION_CAMERA = 1004u,
    PERCEPTION_LANE = 1005u,
    PERCEPTION_MARK = 1006u,
    PREDECTION = 1101u,
    PLANNING = 1201u,
    CONTROL = 1301u,
    LOCALIZATION = 1401u,
    MAP = 1501u,
    MONITOR = 1601u,
    HMI = 1701u,
    AUDIO = 1801u,
    V2X = 1901u,
  };


  typedef boost::shared_ptr< ::roscpp_tutorials::ModuleName_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::ModuleName_<ContainerAllocator> const> ConstPtr;

}; // struct ModuleName_

typedef ::roscpp_tutorials::ModuleName_<std::allocator<void> > ModuleName;

typedef boost::shared_ptr< ::roscpp_tutorials::ModuleName > ModuleNamePtr;
typedef boost::shared_ptr< ::roscpp_tutorials::ModuleName const> ModuleNameConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::ModuleName_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ModuleName_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ModuleName_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ModuleName_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a85423e1e97449728e6cee59595aa340";
  }

  static const char* value(const ::roscpp_tutorials::ModuleName_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa85423e1e9744972ULL;
  static const uint64_t static_value2 = 0x8e6cee59595aa340ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/ModuleName";
  }

  static const char* value(const ::roscpp_tutorials::ModuleName_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  ## DRIVER DEVICES 0~1000\n\
  uint16 CAN_MOBILEYE = 1\n\
  uint16 CAN_METOAK = 2\n\
  uint16 CAN_CONTI_RADAR = 3\n\
  uint16 CAN_ULTRASONIC_RADAR = 4\n\
  uint16 DRIVER_CAMEAR = 5\n\
  uint16 DRIVER_LIDAR = 6\n\
  uint16 DRIVER_LIVOX = 7\n\
  ## PERCEPTION 1001~1100\n\
  uint16 PERCEPTION = 1001\n\
  uint16 PERCEPTION_CAN = 1002\n\
  uint16 PERCEPTION_LIDAR = 1003\n\
  uint16 PERCEPTION_CAMERA = 1004\n\
  uint16 PERCEPTION_LANE = 1005\n\
  uint16 PERCEPTION_MARK = 1006\n\
  ## PREDECTION 1101~1200\n\
  uint16 PREDECTION = 1101\n\
  ## PLANNING 1201~1300\n\
  uint16 PLANNING = 1201\n\
  ## CONTROL 1301~1400\n\
  uint16 CONTROL = 1301\n\
  ## LOCALIZATION 1401~1500\n\
  uint16 LOCALIZATION = 1401\n\
  ## MAP 1501~1600\n\
  uint16 MAP = 1501\n\
  ## MONITOR 1601~1700\n\
  uint16 MONITOR = 1601\n\
  ## HMI 1701~1800\n\
  uint16 HMI = 1701\n\
  ## AUDIO 1801~1900\n\
  uint16 AUDIO = 1801\n\
  ## V2X 1901~2000\n\
  uint16 V2X = 1901\n\
";
  }

  static const char* value(const ::roscpp_tutorials::ModuleName_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModuleName_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::ModuleName_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::roscpp_tutorials::ModuleName_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_MODULENAME_H
