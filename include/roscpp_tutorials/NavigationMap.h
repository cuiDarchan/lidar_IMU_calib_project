// Generated by gencpp from file roscpp_tutorials/NavigationMap.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_NAVIGATIONMAP_H
#define ROSCPP_TUTORIALS_MESSAGE_NAVIGATIONMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/Passage.h>
#include <roscpp_tutorials/NavigationLane.h>
#include <roscpp_tutorials/ROIRegion.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct NavigationMap_
{
  typedef NavigationMap_<ContainerAllocator> Type;

  NavigationMap_()
    : header()
    , hmi_token(0)
    , source(0)
    , passages()
    , lanes()
    , roi_region()
    , auto_driving_mode(0)
    , parking_space_ids()  {
    }
  NavigationMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hmi_token(0)
    , source(0)
    , passages(_alloc)
    , lanes(_alloc)
    , roi_region(_alloc)
    , auto_driving_mode(0)
    , parking_space_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _hmi_token_type;
  _hmi_token_type hmi_token;

   typedef uint16_t _source_type;
  _source_type source;

   typedef std::vector< ::roscpp_tutorials::Passage_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::Passage_<ContainerAllocator> >::other >  _passages_type;
  _passages_type passages;

   typedef std::vector< ::roscpp_tutorials::NavigationLane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::NavigationLane_<ContainerAllocator> >::other >  _lanes_type;
  _lanes_type lanes;

   typedef  ::roscpp_tutorials::ROIRegion_<ContainerAllocator>  _roi_region_type;
  _roi_region_type roi_region;

   typedef uint16_t _auto_driving_mode_type;
  _auto_driving_mode_type auto_driving_mode;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _parking_space_ids_type;
  _parking_space_ids_type parking_space_ids;





  typedef boost::shared_ptr< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationMap_

typedef ::roscpp_tutorials::NavigationMap_<std::allocator<void> > NavigationMap;

typedef boost::shared_ptr< ::roscpp_tutorials::NavigationMap > NavigationMapPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::NavigationMap const> NavigationMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::NavigationMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59968a0582905ee0bd9c6f16213a1cdf";
  }

  static const char* value(const ::roscpp_tutorials::NavigationMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59968a0582905ee0ULL;
  static const uint64_t static_value2 = 0xbd9c6f16213a1cdfULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/NavigationMap";
  }

  static const char* value(const ::roscpp_tutorials::NavigationMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
uint64 hmi_token\n\
uint16 source\n\
Passage[] passages\n\
NavigationLane[] lanes\n\
ROIRegion roi_region\n\
uint16 auto_driving_mode\n\
string[] parking_space_ids\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Passage\n\
string id\n\
PathPoint[] path\n\
LaneSampleAssociation[] left_samples\n\
LaneSampleAssociation[] right_samples\n\
PassageType[] types\n\
PassageSpeed[] speed_limit\n\
NavigationLaneBoundary left_boundary\n\
NavigationLaneBoundary right_boundary\n\
CurveSign[] curve_signs\n\
PolygonSign[] polygon_signs\n\
Signal[] signals\n\
bool is_on_passage\n\
bool can_exit\n\
uint16 change_lane_type\n\
float32 remain_length\n\
bool stop_for_destination\n\
string predecessor_id\n\
string sucessor_id\n\
string left_neighbor_id\n\
string right_neighbor_id\n\
ParkingSpace[] parking_spaces\n\
PassageTurn[] turns\n\
================================================================================\n\
MSG: roscpp_tutorials/PathPoint\n\
Point3d position\n\
float32 theta\n\
float32 kappa\n\
float32 s\n\
float32 dkappa\n\
float32 ddkappa\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
================================================================================\n\
MSG: roscpp_tutorials/LaneSampleAssociation\n\
float32 start_s\n\
float32 end_s\n\
float32 width\n\
================================================================================\n\
MSG: roscpp_tutorials/PassageType\n\
    uint16 type\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/PassageSpeed\n\
    float32 speed_limit\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/NavigationLaneBoundary\n\
LaneBoundaryType[] type\n\
Curved segments\n\
================================================================================\n\
MSG: roscpp_tutorials/LaneBoundaryType\n\
    uint16 shape\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/Curved\n\
Vec3d[] points\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Vec3d\n\
float32[3] point\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/CurveSign\n\
    string id\n\
    uint16 type\n\
    string other_type\n\
    Curved segments\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/PolygonSign\n\
    string id\n\
    uint16 type\n\
    string other_type\n\
    Curved points\n\
    float32 start_s\n\
    float32 end_s\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Signal\n\
    string id\n\
    uint16 type\n\
    float32[3] position\n\
    Curved roi_polygon\n\
    Curved stop_line\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/ParkingSpace\n\
string id\n\
uint16 type\n\
Curved polygon\n\
float32 heading\n\
float32 start_s\n\
float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/PassageTurn\n\
    uint16 turn_type\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/NavigationLane\n\
    string id\n\
    Curved central_curve\n\
    LaneSampleAssociation[] left_samples\n\
    LaneSampleAssociation[] right_samples\n\
    uint16 type\n\
    float32 speed_limit\n\
    NavigationLaneBoundary left_boundary\n\
    NavigationLaneBoundary right_boundary\n\
    string[] predecessor_id\n\
    string[] sucessor_id\n\
    string[] left_neighbor_id\n\
    string[] right_neighbor_id\n\
    CurveSign[] curve_signs\n\
    PolygonSign[] polygon_signs\n\
    Signal[] signals\n\
    ParkingSpace[] parking_spaces\n\
    uint16 turn\n\
================================================================================\n\
MSG: roscpp_tutorials/ROIRegion\n\
    RoadROIBoundary[] road_boundarys\n\
    \n\
    JunctionROIPolygon[] junction_polygons\n\
================================================================================\n\
MSG: roscpp_tutorials/RoadROIBoundary\n\
    string id\n\
    \n\
    Curved left_boundary\n\
    \n\
    Curved right_boundary\n\
================================================================================\n\
MSG: roscpp_tutorials/JunctionROIPolygon\n\
    string id\n\
    \n\
    Curved points\n\
    \n\
    float32 start_s\n\
    \n\
    float32 end_s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::NavigationMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hmi_token);
      stream.next(m.source);
      stream.next(m.passages);
      stream.next(m.lanes);
      stream.next(m.roi_region);
      stream.next(m.auto_driving_mode);
      stream.next(m.parking_space_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::NavigationMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::NavigationMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hmi_token: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.hmi_token);
    s << indent << "source: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.source);
    s << indent << "passages[]" << std::endl;
    for (size_t i = 0; i < v.passages.size(); ++i)
    {
      s << indent << "  passages[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::Passage_<ContainerAllocator> >::stream(s, indent + "    ", v.passages[i]);
    }
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::NavigationLane_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
    s << indent << "roi_region: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >::stream(s, indent + "  ", v.roi_region);
    s << indent << "auto_driving_mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.auto_driving_mode);
    s << indent << "parking_space_ids[]" << std::endl;
    for (size_t i = 0; i < v.parking_space_ids.size(); ++i)
    {
      s << indent << "  parking_space_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parking_space_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_NAVIGATIONMAP_H
