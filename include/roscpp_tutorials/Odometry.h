// Generated by gencpp from file roscpp_tutorials/Odometry.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_ODOMETRY_H
#define ROSCPP_TUTORIALS_MESSAGE_ODOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/Quaterniond.h>
#include <roscpp_tutorials/Transform.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Odometry_
{
  typedef Odometry_<ContainerAllocator> Type;

  Odometry_()
    : header()
    , measured_timestamp(0)
    , position()
    , orientation()
    , linear_velocity()
    , linear_velocity_avg()
    , linear_acceleration()
    , linear_acceleration_avg()
    , angular_velocity()
    , angular_velocity_avg()
    , euler_angles()
    , tfs()  {
      position.assign(0.0);

      linear_velocity.assign(0.0);

      linear_velocity_avg.assign(0.0);

      linear_acceleration.assign(0.0);

      linear_acceleration_avg.assign(0.0);

      angular_velocity.assign(0.0);

      angular_velocity_avg.assign(0.0);

      euler_angles.assign(0.0);
  }
  Odometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , measured_timestamp(0)
    , position()
    , orientation(_alloc)
    , linear_velocity()
    , linear_velocity_avg()
    , linear_acceleration()
    , linear_acceleration_avg()
    , angular_velocity()
    , angular_velocity_avg()
    , euler_angles()
    , tfs(_alloc)  {
  (void)_alloc;
      position.assign(0.0);

      linear_velocity.assign(0.0);

      linear_velocity_avg.assign(0.0);

      linear_acceleration.assign(0.0);

      linear_acceleration_avg.assign(0.0);

      angular_velocity.assign(0.0);

      angular_velocity_avg.assign(0.0);

      euler_angles.assign(0.0);
  }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _measured_timestamp_type;
  _measured_timestamp_type measured_timestamp;

   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef  ::roscpp_tutorials::Quaterniond_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef boost::array<float, 3>  _linear_velocity_avg_type;
  _linear_velocity_avg_type linear_velocity_avg;

   typedef boost::array<float, 3>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<float, 3>  _linear_acceleration_avg_type;
  _linear_acceleration_avg_type linear_acceleration_avg;

   typedef boost::array<float, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef boost::array<float, 3>  _angular_velocity_avg_type;
  _angular_velocity_avg_type angular_velocity_avg;

   typedef boost::array<float, 3>  _euler_angles_type;
  _euler_angles_type euler_angles;

   typedef std::vector< ::roscpp_tutorials::Transform_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::Transform_<ContainerAllocator> >::other >  _tfs_type;
  _tfs_type tfs;





  typedef boost::shared_ptr< ::roscpp_tutorials::Odometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Odometry_<ContainerAllocator> const> ConstPtr;

}; // struct Odometry_

typedef ::roscpp_tutorials::Odometry_<std::allocator<void> > Odometry;

typedef boost::shared_ptr< ::roscpp_tutorials::Odometry > OdometryPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Odometry const> OdometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Odometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Odometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Odometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Odometry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ffa65e2fa5eb79ed1485e5ecde58013";
  }

  static const char* value(const ::roscpp_tutorials::Odometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ffa65e2fa5eb79eULL;
  static const uint64_t static_value2 = 0xd1485e5ecde58013ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Odometry";
  }

  static const char* value(const ::roscpp_tutorials::Odometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
MsgHeader header\n\
uint64 measured_timestamp\n\
float64[3] position\n\
Quaterniond  orientation\n\
float32[3] linear_velocity\n\
float32[3] linear_velocity_avg\n\
float32[3] linear_acceleration\n\
float32[3] linear_acceleration_avg\n\
float32[3] angular_velocity\n\
float32[3] angular_velocity_avg\n\
float32[3] euler_angles\n\
Transform[] tfs\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Quaterniond\n\
float64 w\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: roscpp_tutorials/Transform\n\
uint64 measured_timestamp\n\
float64[3] position\n\
Quaterniond orientation\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Odometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.measured_timestamp);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.linear_velocity);
      stream.next(m.linear_velocity_avg);
      stream.next(m.linear_acceleration);
      stream.next(m.linear_acceleration_avg);
      stream.next(m.angular_velocity);
      stream.next(m.angular_velocity_avg);
      stream.next(m.euler_angles);
      stream.next(m.tfs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Odometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Odometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "measured_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.measured_timestamp);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Quaterniond_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "linear_velocity[]" << std::endl;
    for (size_t i = 0; i < v.linear_velocity.size(); ++i)
    {
      s << indent << "  linear_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_velocity[i]);
    }
    s << indent << "linear_velocity_avg[]" << std::endl;
    for (size_t i = 0; i < v.linear_velocity_avg.size(); ++i)
    {
      s << indent << "  linear_velocity_avg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_velocity_avg[i]);
    }
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration[i]);
    }
    s << indent << "linear_acceleration_avg[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration_avg.size(); ++i)
    {
      s << indent << "  linear_acceleration_avg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration_avg[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
    s << indent << "angular_velocity_avg[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity_avg.size(); ++i)
    {
      s << indent << "  angular_velocity_avg[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity_avg[i]);
    }
    s << indent << "euler_angles[]" << std::endl;
    for (size_t i = 0; i < v.euler_angles.size(); ++i)
    {
      s << indent << "  euler_angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler_angles[i]);
    }
    s << indent << "tfs[]" << std::endl;
    for (size_t i = 0; i < v.tfs.size(); ++i)
    {
      s << indent << "  tfs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::Transform_<ContainerAllocator> >::stream(s, indent + "    ", v.tfs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_ODOMETRY_H
