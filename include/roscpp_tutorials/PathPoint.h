// Generated by gencpp from file roscpp_tutorials/PathPoint.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_PATHPOINT_H
#define ROSCPP_TUTORIALS_MESSAGE_PATHPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/Point3d.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct PathPoint_
{
  typedef PathPoint_<ContainerAllocator> Type;

  PathPoint_()
    : position()
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)  {
    }
  PathPoint_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , theta(0.0)
    , kappa(0.0)
    , s(0.0)
    , dkappa(0.0)
    , ddkappa(0.0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::Point3d_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _kappa_type;
  _kappa_type kappa;

   typedef float _s_type;
  _s_type s;

   typedef float _dkappa_type;
  _dkappa_type dkappa;

   typedef float _ddkappa_type;
  _ddkappa_type ddkappa;





  typedef boost::shared_ptr< ::roscpp_tutorials::PathPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::PathPoint_<ContainerAllocator> const> ConstPtr;

}; // struct PathPoint_

typedef ::roscpp_tutorials::PathPoint_<std::allocator<void> > PathPoint;

typedef boost::shared_ptr< ::roscpp_tutorials::PathPoint > PathPointPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::PathPoint const> PathPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::PathPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PathPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c05a5638c493643343839eb1a8f22f8";
  }

  static const char* value(const ::roscpp_tutorials::PathPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c05a5638c493643ULL;
  static const uint64_t static_value2 = 0x343839eb1a8f22f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/PathPoint";
  }

  static const char* value(const ::roscpp_tutorials::PathPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Point3d position\n\
float32 theta\n\
float32 kappa\n\
float32 s\n\
float32 dkappa\n\
float32 ddkappa\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::PathPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.theta);
      stream.next(m.kappa);
      stream.next(m.s);
      stream.next(m.dkappa);
      stream.next(m.ddkappa);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::PathPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::PathPoint_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Point3d_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "kappa: ";
    Printer<float>::stream(s, indent + "  ", v.kappa);
    s << indent << "s: ";
    Printer<float>::stream(s, indent + "  ", v.s);
    s << indent << "dkappa: ";
    Printer<float>::stream(s, indent + "  ", v.dkappa);
    s << indent << "ddkappa: ";
    Printer<float>::stream(s, indent + "  ", v.ddkappa);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_PATHPOINT_H
