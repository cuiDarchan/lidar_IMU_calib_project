// Generated by gencpp from file roscpp_tutorials/PerceptionObstacle.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_PERCEPTIONOBSTACLE_H
#define ROSCPP_TUTORIALS_MESSAGE_PERCEPTIONOBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/Point3d.h>
#include <roscpp_tutorials/Point3d.h>
#include <roscpp_tutorials/Point3d.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct PerceptionObstacle_
{
  typedef PerceptionObstacle_<ContainerAllocator> Type;

  PerceptionObstacle_()
    : id(0)
    , position()
    , theta(0.0)
    , velocity()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_points()
    , tracking_time(0.0)
    , obstacle_type(0)
    , sub_type(0)
    , gps_timestamp(0.0)
    , type_name()
    , confidence(0.0)
    , type_confidence(0.0)
    , is_static(false)
    , reserved_1(0.0)  {
    }
  PerceptionObstacle_(const ContainerAllocator& _alloc)
    : id(0)
    , position(_alloc)
    , theta(0.0)
    , velocity(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , polygon_points(_alloc)
    , tracking_time(0.0)
    , obstacle_type(0)
    , sub_type(0)
    , gps_timestamp(0.0)
    , type_name(_alloc)
    , confidence(0.0)
    , type_confidence(0.0)
    , is_static(false)
    , reserved_1(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef  ::roscpp_tutorials::Point3d_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _theta_type;
  _theta_type theta;

   typedef  ::roscpp_tutorials::Point3d_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef std::vector< ::roscpp_tutorials::Point3d_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::Point3d_<ContainerAllocator> >::other >  _polygon_points_type;
  _polygon_points_type polygon_points;

   typedef float _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef uint16_t _obstacle_type_type;
  _obstacle_type_type obstacle_type;

   typedef uint16_t _sub_type_type;
  _sub_type_type sub_type;

   typedef float _gps_timestamp_type;
  _gps_timestamp_type gps_timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_name_type;
  _type_name_type type_name;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _type_confidence_type;
  _type_confidence_type type_confidence;

   typedef uint8_t _is_static_type;
  _is_static_type is_static;

   typedef float _reserved_1_type;
  _reserved_1_type reserved_1;





  typedef boost::shared_ptr< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionObstacle_

typedef ::roscpp_tutorials::PerceptionObstacle_<std::allocator<void> > PerceptionObstacle;

typedef boost::shared_ptr< ::roscpp_tutorials::PerceptionObstacle > PerceptionObstaclePtr;
typedef boost::shared_ptr< ::roscpp_tutorials::PerceptionObstacle const> PerceptionObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6b192ec34adb032bc65d09a5d626a92";
  }

  static const char* value(const ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6b192ec34adb032ULL;
  static const uint64_t static_value2 = 0xbc65d09a5d626a92ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/PerceptionObstacle";
  }

  static const char* value(const ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "        uint32 id 		  # obstacle ID.\n\
	Point3d position  # obstacle position in the world coordinate\n\
	# system.\n\
	float32 theta 	 # heading in the world coordinate system.\n\
	Point3d velocity  # obstacle velocity.\n\
\n\
	# Size of obstacle bounding box.\n\
	float32 length  # obstacle length.\n\
	float32 width   # obstacle width.\n\
	float32 height  # obstacle height.\n\
\n\
	# obstacle corner points\n\
	Point3d[] polygon_points \n\
	# duration of an obstacle since detection in seconds.\n\
	float32 tracking_time \n\
\n\
	uint16 obstacle_type    # obstacle type\n\
	uint16 sub_type   # obstacle sub_type\n\
	float32 gps_timestamp  # GPS time in seconds.\n\
	string type_name \n\
\n\
	float32 confidence \n\
	float32 type_confidence\n\
	bool is_static\n\
\n\
	float32 reserved_1\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.position);
      stream.next(m.theta);
      stream.next(m.velocity);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.polygon_points);
      stream.next(m.tracking_time);
      stream.next(m.obstacle_type);
      stream.next(m.sub_type);
      stream.next(m.gps_timestamp);
      stream.next(m.type_name);
      stream.next(m.confidence);
      stream.next(m.type_confidence);
      stream.next(m.is_static);
      stream.next(m.reserved_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionObstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::PerceptionObstacle_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Point3d_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Point3d_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "polygon_points[]" << std::endl;
    for (size_t i = 0; i < v.polygon_points.size(); ++i)
    {
      s << indent << "  polygon_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::Point3d_<ContainerAllocator> >::stream(s, indent + "    ", v.polygon_points[i]);
    }
    s << indent << "tracking_time: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "obstacle_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obstacle_type);
    s << indent << "sub_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sub_type);
    s << indent << "gps_timestamp: ";
    Printer<float>::stream(s, indent + "  ", v.gps_timestamp);
    s << indent << "type_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_name);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "type_confidence: ";
    Printer<float>::stream(s, indent + "  ", v.type_confidence);
    s << indent << "is_static: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_static);
    s << indent << "reserved_1: ";
    Printer<float>::stream(s, indent + "  ", v.reserved_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_PERCEPTIONOBSTACLE_H
