// Generated by gencpp from file roscpp_tutorials/PredictionObstacles.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_PREDICTIONOBSTACLES_H
#define ROSCPP_TUTORIALS_MESSAGE_PREDICTIONOBSTACLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/PredictionObstacle.h>
#include <roscpp_tutorials/Localization.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct PredictionObstacles_
{
  typedef PredictionObstacles_<ContainerAllocator> Type;

  PredictionObstacles_()
    : header()
    , prediction_obstacles()
    , start_timestamp()
    , end_timestamp()
    , localization()  {
    }
  PredictionObstacles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , prediction_obstacles(_alloc)
    , start_timestamp()
    , end_timestamp()
    , localization(_alloc)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::roscpp_tutorials::PredictionObstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::PredictionObstacle_<ContainerAllocator> >::other >  _prediction_obstacles_type;
  _prediction_obstacles_type prediction_obstacles;

   typedef ros::Time _start_timestamp_type;
  _start_timestamp_type start_timestamp;

   typedef ros::Time _end_timestamp_type;
  _end_timestamp_type end_timestamp;

   typedef  ::roscpp_tutorials::Localization_<ContainerAllocator>  _localization_type;
  _localization_type localization;





  typedef boost::shared_ptr< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> const> ConstPtr;

}; // struct PredictionObstacles_

typedef ::roscpp_tutorials::PredictionObstacles_<std::allocator<void> > PredictionObstacles;

typedef boost::shared_ptr< ::roscpp_tutorials::PredictionObstacles > PredictionObstaclesPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::PredictionObstacles const> PredictionObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19c9e0c9a5eccf47e17aa34b2d5ed156";
  }

  static const char* value(const ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19c9e0c9a5eccf47ULL;
  static const uint64_t static_value2 = 0xe17aa34b2d5ed156ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/PredictionObstacles";
  }

  static const char* value(const ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
PredictionObstacle[] prediction_obstacles\n\
time start_timestamp\n\
time end_timestamp\n\
Localization localization\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/PredictionObstacle\n\
PerceptionObstacle perception_obstacle\n\
time gps_timestamp\n\
float32 predicted_period\n\
Trajectory[] trajectories\n\
================================================================================\n\
MSG: roscpp_tutorials/PerceptionObstacle\n\
        uint32 id 		  # obstacle ID.\n\
	Point3d position  # obstacle position in the world coordinate\n\
	# system.\n\
	float32 theta 	 # heading in the world coordinate system.\n\
	Point3d velocity  # obstacle velocity.\n\
\n\
	# Size of obstacle bounding box.\n\
	float32 length  # obstacle length.\n\
	float32 width   # obstacle width.\n\
	float32 height  # obstacle height.\n\
\n\
	# obstacle corner points\n\
	Point3d[] polygon_points \n\
	# duration of an obstacle since detection in seconds.\n\
	float32 tracking_time \n\
\n\
	uint16 obstacle_type    # obstacle type\n\
	uint16 sub_type   # obstacle sub_type\n\
	float32 gps_timestamp  # GPS time in seconds.\n\
	string type_name \n\
\n\
	float32 confidence \n\
	float32 type_confidence\n\
	bool is_static\n\
\n\
	float32 reserved_1\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
================================================================================\n\
MSG: roscpp_tutorials/Trajectory\n\
float32 probability\n\
TrajectoryPoint[] trajectory_points\n\
================================================================================\n\
MSG: roscpp_tutorials/TrajectoryPoint\n\
PathPoint path_point\n\
float32 v\n\
float32 a\n\
float32 relative_time\n\
float32 da\n\
================================================================================\n\
MSG: roscpp_tutorials/PathPoint\n\
Point3d position\n\
float32 theta\n\
float32 kappa\n\
float32 s\n\
float32 dkappa\n\
float32 ddkappa\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Localization\n\
MsgHeader header\n\
\n\
time measured_timestamp\n\
\n\
float64[3] position\n\
\n\
float32[3] linear_velocity\n\
\n\
float32[3] linear_acceleration\n\
\n\
Quaterniond orientation\n\
\n\
float32 heading\n\
\n\
float32[3] euler_angles\n\
\n\
float32[3] angular_velocity\n\
\n\
Uncertainty uncertainty\n\
\n\
LocalizationStatus status\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Quaterniond\n\
float64 w\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: roscpp_tutorials/Uncertainty\n\
float32[3] position_std_dev\n\
float32[3] velocity_std_dev\n\
float32[3] orientation_std_dev\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/LocalizationStatus\n\
MeasureState fusion_status\n\
MeasureState gnss_status\n\
MeasureState lidar_status\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MeasureState\n\
uint8 NOT_VALID = 0\n\
uint8 NOT_STABLE = 1\n\
uint8 OK = 2\n\
uint8 VALID = 3\n\
";
  }

  static const char* value(const ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.prediction_obstacles);
      stream.next(m.start_timestamp);
      stream.next(m.end_timestamp);
      stream.next(m.localization);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictionObstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::PredictionObstacles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "prediction_obstacles[]" << std::endl;
    for (size_t i = 0; i < v.prediction_obstacles.size(); ++i)
    {
      s << indent << "  prediction_obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::PredictionObstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.prediction_obstacles[i]);
    }
    s << indent << "start_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_timestamp);
    s << indent << "end_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_timestamp);
    s << indent << "localization: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Localization_<ContainerAllocator> >::stream(s, indent + "  ", v.localization);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_PREDICTIONOBSTACLES_H
