// Generated by gencpp from file roscpp_tutorials/ROIRegion.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_ROIREGION_H
#define ROSCPP_TUTORIALS_MESSAGE_ROIREGION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/RoadROIBoundary.h>
#include <roscpp_tutorials/JunctionROIPolygon.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct ROIRegion_
{
  typedef ROIRegion_<ContainerAllocator> Type;

  ROIRegion_()
    : road_boundarys()
    , junction_polygons()  {
    }
  ROIRegion_(const ContainerAllocator& _alloc)
    : road_boundarys(_alloc)
    , junction_polygons(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::roscpp_tutorials::RoadROIBoundary_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::RoadROIBoundary_<ContainerAllocator> >::other >  _road_boundarys_type;
  _road_boundarys_type road_boundarys;

   typedef std::vector< ::roscpp_tutorials::JunctionROIPolygon_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::JunctionROIPolygon_<ContainerAllocator> >::other >  _junction_polygons_type;
  _junction_polygons_type junction_polygons;





  typedef boost::shared_ptr< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> const> ConstPtr;

}; // struct ROIRegion_

typedef ::roscpp_tutorials::ROIRegion_<std::allocator<void> > ROIRegion;

typedef boost::shared_ptr< ::roscpp_tutorials::ROIRegion > ROIRegionPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::ROIRegion const> ROIRegionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::ROIRegion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6505beacaaa31b9174efabb026eb5142";
  }

  static const char* value(const ::roscpp_tutorials::ROIRegion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6505beacaaa31b91ULL;
  static const uint64_t static_value2 = 0x74efabb026eb5142ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/ROIRegion";
  }

  static const char* value(const ::roscpp_tutorials::ROIRegion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    RoadROIBoundary[] road_boundarys\n\
    \n\
    JunctionROIPolygon[] junction_polygons\n\
================================================================================\n\
MSG: roscpp_tutorials/RoadROIBoundary\n\
    string id\n\
    \n\
    Curved left_boundary\n\
    \n\
    Curved right_boundary\n\
================================================================================\n\
MSG: roscpp_tutorials/Curved\n\
Vec3d[] points\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Vec3d\n\
float32[3] point\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/JunctionROIPolygon\n\
    string id\n\
    \n\
    Curved points\n\
    \n\
    float32 start_s\n\
    \n\
    float32 end_s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::ROIRegion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.road_boundarys);
      stream.next(m.junction_polygons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ROIRegion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::ROIRegion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::ROIRegion_<ContainerAllocator>& v)
  {
    s << indent << "road_boundarys[]" << std::endl;
    for (size_t i = 0; i < v.road_boundarys.size(); ++i)
    {
      s << indent << "  road_boundarys[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::RoadROIBoundary_<ContainerAllocator> >::stream(s, indent + "    ", v.road_boundarys[i]);
    }
    s << indent << "junction_polygons[]" << std::endl;
    for (size_t i = 0; i < v.junction_polygons.size(); ++i)
    {
      s << indent << "  junction_polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::JunctionROIPolygon_<ContainerAllocator> >::stream(s, indent + "    ", v.junction_polygons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_ROIREGION_H
