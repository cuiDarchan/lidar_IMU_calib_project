// Generated by gencpp from file roscpp_tutorials/RadarRawObject.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_RADARRAWOBJECT_H
#define ROSCPP_TUTORIALS_MESSAGE_RADARRAWOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct RadarRawObject_
{
  typedef RadarRawObject_<ContainerAllocator> Type;

  RadarRawObject_()
    : id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , dyn_prop(0)
    , rcs(0.0)
    , longitude_dist_rms(0.0)
    , longitude_vel_rms(0.0)
    , lateral_dist_rms(0.0)
    , lateral_vel_rms(0.0)
    , lateral_accel_rms(0.0)
    , longitude_accel_rms(0.0)
    , oritation_angle_rms(0.0)
    , meas_state(0)
    , prob_of_exist(0.0)
    , longitude_accel(0.0)
    , object_class(0)
    , lateral_accel(0.0)
    , oritation_angle(0.0)
    , object_length(0.0)
    , object_width(0.0)  {
    }
  RadarRawObject_(const ContainerAllocator& _alloc)
    : id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , dyn_prop(0)
    , rcs(0.0)
    , longitude_dist_rms(0.0)
    , longitude_vel_rms(0.0)
    , lateral_dist_rms(0.0)
    , lateral_vel_rms(0.0)
    , lateral_accel_rms(0.0)
    , longitude_accel_rms(0.0)
    , oritation_angle_rms(0.0)
    , meas_state(0)
    , prob_of_exist(0.0)
    , longitude_accel(0.0)
    , object_class(0)
    , lateral_accel(0.0)
    , oritation_angle(0.0)
    , object_length(0.0)
    , object_width(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _longitude_dist_type;
  _longitude_dist_type longitude_dist;

   typedef float _lateral_dist_type;
  _lateral_dist_type lateral_dist;

   typedef float _longitude_vel_type;
  _longitude_vel_type longitude_vel;

   typedef float _lateral_vel_type;
  _lateral_vel_type lateral_vel;

   typedef uint8_t _dyn_prop_type;
  _dyn_prop_type dyn_prop;

   typedef float _rcs_type;
  _rcs_type rcs;

   typedef float _longitude_dist_rms_type;
  _longitude_dist_rms_type longitude_dist_rms;

   typedef float _longitude_vel_rms_type;
  _longitude_vel_rms_type longitude_vel_rms;

   typedef float _lateral_dist_rms_type;
  _lateral_dist_rms_type lateral_dist_rms;

   typedef float _lateral_vel_rms_type;
  _lateral_vel_rms_type lateral_vel_rms;

   typedef float _lateral_accel_rms_type;
  _lateral_accel_rms_type lateral_accel_rms;

   typedef float _longitude_accel_rms_type;
  _longitude_accel_rms_type longitude_accel_rms;

   typedef float _oritation_angle_rms_type;
  _oritation_angle_rms_type oritation_angle_rms;

   typedef uint8_t _meas_state_type;
  _meas_state_type meas_state;

   typedef float _prob_of_exist_type;
  _prob_of_exist_type prob_of_exist;

   typedef float _longitude_accel_type;
  _longitude_accel_type longitude_accel;

   typedef uint8_t _object_class_type;
  _object_class_type object_class;

   typedef float _lateral_accel_type;
  _lateral_accel_type lateral_accel;

   typedef float _oritation_angle_type;
  _oritation_angle_type oritation_angle;

   typedef float _object_length_type;
  _object_length_type object_length;

   typedef float _object_width_type;
  _object_width_type object_width;





  typedef boost::shared_ptr< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> const> ConstPtr;

}; // struct RadarRawObject_

typedef ::roscpp_tutorials::RadarRawObject_<std::allocator<void> > RadarRawObject;

typedef boost::shared_ptr< ::roscpp_tutorials::RadarRawObject > RadarRawObjectPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::RadarRawObject const> RadarRawObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9f6a41b51e0a52a1ed0293126a589a1";
  }

  static const char* value(const ::roscpp_tutorials::RadarRawObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9f6a41b51e0a52aULL;
  static const uint64_t static_value2 = 0x1ed0293126a589a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/RadarRawObject";
  }

  static const char* value(const ::roscpp_tutorials::RadarRawObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 id\n\
float32 longitude_dist\n\
float32 lateral_dist\n\
float32 longitude_vel\n\
float32 lateral_vel\n\
uint8 dyn_prop\n\
float32 rcs\n\
float32 longitude_dist_rms\n\
float32 longitude_vel_rms\n\
float32 lateral_dist_rms\n\
float32 lateral_vel_rms\n\
float32 lateral_accel_rms\n\
float32 longitude_accel_rms\n\
float32 oritation_angle_rms\n\
uint8 meas_state\n\
float32 prob_of_exist\n\
float32 longitude_accel\n\
uint8 object_class\n\
float32 lateral_accel\n\
float32 oritation_angle\n\
float32 object_length\n\
float32 object_width\n\
";
  }

  static const char* value(const ::roscpp_tutorials::RadarRawObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.longitude_dist);
      stream.next(m.lateral_dist);
      stream.next(m.longitude_vel);
      stream.next(m.lateral_vel);
      stream.next(m.dyn_prop);
      stream.next(m.rcs);
      stream.next(m.longitude_dist_rms);
      stream.next(m.longitude_vel_rms);
      stream.next(m.lateral_dist_rms);
      stream.next(m.lateral_vel_rms);
      stream.next(m.lateral_accel_rms);
      stream.next(m.longitude_accel_rms);
      stream.next(m.oritation_angle_rms);
      stream.next(m.meas_state);
      stream.next(m.prob_of_exist);
      stream.next(m.longitude_accel);
      stream.next(m.object_class);
      stream.next(m.lateral_accel);
      stream.next(m.oritation_angle);
      stream.next(m.object_length);
      stream.next(m.object_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarRawObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::RadarRawObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::RadarRawObject_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "longitude_dist: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_dist);
    s << indent << "lateral_dist: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_dist);
    s << indent << "longitude_vel: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_vel);
    s << indent << "lateral_vel: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_vel);
    s << indent << "dyn_prop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dyn_prop);
    s << indent << "rcs: ";
    Printer<float>::stream(s, indent + "  ", v.rcs);
    s << indent << "longitude_dist_rms: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_dist_rms);
    s << indent << "longitude_vel_rms: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_vel_rms);
    s << indent << "lateral_dist_rms: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_dist_rms);
    s << indent << "lateral_vel_rms: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_vel_rms);
    s << indent << "lateral_accel_rms: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_accel_rms);
    s << indent << "longitude_accel_rms: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_accel_rms);
    s << indent << "oritation_angle_rms: ";
    Printer<float>::stream(s, indent + "  ", v.oritation_angle_rms);
    s << indent << "meas_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meas_state);
    s << indent << "prob_of_exist: ";
    Printer<float>::stream(s, indent + "  ", v.prob_of_exist);
    s << indent << "longitude_accel: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_accel);
    s << indent << "object_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object_class);
    s << indent << "lateral_accel: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_accel);
    s << indent << "oritation_angle: ";
    Printer<float>::stream(s, indent + "  ", v.oritation_angle);
    s << indent << "object_length: ";
    Printer<float>::stream(s, indent + "  ", v.object_length);
    s << indent << "object_width: ";
    Printer<float>::stream(s, indent + "  ", v.object_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_RADARRAWOBJECT_H
