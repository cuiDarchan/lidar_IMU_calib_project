// Generated by gencpp from file roscpp_tutorials/Signal.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_SIGNAL_H
#define ROSCPP_TUTORIALS_MESSAGE_SIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/Curved.h>
#include <roscpp_tutorials/Curved.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Signal_
{
  typedef Signal_<ContainerAllocator> Type;

  Signal_()
    : id()
    , type(0)
    , position()
    , roi_polygon()
    , stop_line()
    , start_s(0.0)
    , end_s(0.0)  {
      position.assign(0.0);
  }
  Signal_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(0)
    , position()
    , roi_polygon(_alloc)
    , stop_line(_alloc)
    , start_s(0.0)
    , end_s(0.0)  {
  (void)_alloc;
      position.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef uint16_t _type_type;
  _type_type type;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef  ::roscpp_tutorials::Curved_<ContainerAllocator>  _roi_polygon_type;
  _roi_polygon_type roi_polygon;

   typedef  ::roscpp_tutorials::Curved_<ContainerAllocator>  _stop_line_type;
  _stop_line_type stop_line;

   typedef float _start_s_type;
  _start_s_type start_s;

   typedef float _end_s_type;
  _end_s_type end_s;





  typedef boost::shared_ptr< ::roscpp_tutorials::Signal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Signal_<ContainerAllocator> const> ConstPtr;

}; // struct Signal_

typedef ::roscpp_tutorials::Signal_<std::allocator<void> > Signal;

typedef boost::shared_ptr< ::roscpp_tutorials::Signal > SignalPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Signal const> SignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Signal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Signal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Signal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Signal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Signal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Signal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Signal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Signal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a8f7573e54cc566caec7b7d0aa5ee0d";
  }

  static const char* value(const ::roscpp_tutorials::Signal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a8f7573e54cc566ULL;
  static const uint64_t static_value2 = 0xcaec7b7d0aa5ee0dULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Signal";
  }

  static const char* value(const ::roscpp_tutorials::Signal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Signal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "    string id\n\
    uint16 type\n\
    float32[3] position\n\
    Curved roi_polygon\n\
    Curved stop_line\n\
    float32 start_s\n\
    float32 end_s\n\
================================================================================\n\
MSG: roscpp_tutorials/Curved\n\
Vec3d[] points\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Vec3d\n\
float32[3] point\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Signal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Signal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.position);
      stream.next(m.roi_polygon);
      stream.next(m.stop_line);
      stream.next(m.start_s);
      stream.next(m.end_s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Signal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Signal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Signal_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "roi_polygon: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Curved_<ContainerAllocator> >::stream(s, indent + "  ", v.roi_polygon);
    s << indent << "stop_line: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Curved_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_line);
    s << indent << "start_s: ";
    Printer<float>::stream(s, indent + "  ", v.start_s);
    s << indent << "end_s: ";
    Printer<float>::stream(s, indent + "  ", v.end_s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_SIGNAL_H
