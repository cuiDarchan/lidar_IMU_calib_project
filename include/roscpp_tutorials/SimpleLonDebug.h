// Generated by gencpp from file roscpp_tutorials/SimpleLonDebug.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_SIMPLELONDEBUG_H
#define ROSCPP_TUTORIALS_MESSAGE_SIMPLELONDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct SimpleLonDebug_
{
  typedef SimpleLonDebug_<ContainerAllocator> Type;

  SimpleLonDebug_()
    : station_reference(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , preview_station_error(0.0)
    , speed_reference(0.0)
    , speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , preview_speed_reference(0.0)
    , preview_speed_error(0.0)
    , preview_acceleration_reference(0.0)
    , acceleration_cmd_closeloop(0.0)
    , acceleration_cmd(0.0)
    , acceleration_lookup(0.0)
    , speed_lookup(0.0)
    , calibration_value(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , is_full_stop(false)
    , slope_offset_compensation(0.0)
    , current_station(0.0)
    , path_remain(0.0)
    , auto_model_time(0.0)
    , gear_position(0.0)
    , is_common_stop(false)
    , current_acc(0.0)
    , filtered_acc(0.0)
    , lon_controller_status(0.0)
    , common_stop_time(0.0)
    , common_stop_s(0.0)
    , matched_lon_curvature(0.0)
    , matched_lon_station(0.0)
    , preview_lon_station(0.0)
    , preview_lon_curvature(0.0)
    , reference_lon_curvature(0.0)
    , acceleration_cmd_feedforward(0.0)
    , acceleration_cmd_compensation(0.0)
    , acceleration_cmd_correction(0.0)  {
    }
  SimpleLonDebug_(const ContainerAllocator& _alloc)
    : station_reference(0.0)
    , station_error(0.0)
    , station_error_limited(0.0)
    , preview_station_error(0.0)
    , speed_reference(0.0)
    , speed_error(0.0)
    , speed_controller_input_limited(0.0)
    , preview_speed_reference(0.0)
    , preview_speed_error(0.0)
    , preview_acceleration_reference(0.0)
    , acceleration_cmd_closeloop(0.0)
    , acceleration_cmd(0.0)
    , acceleration_lookup(0.0)
    , speed_lookup(0.0)
    , calibration_value(0.0)
    , throttle_cmd(0.0)
    , brake_cmd(0.0)
    , is_full_stop(false)
    , slope_offset_compensation(0.0)
    , current_station(0.0)
    , path_remain(0.0)
    , auto_model_time(0.0)
    , gear_position(0.0)
    , is_common_stop(false)
    , current_acc(0.0)
    , filtered_acc(0.0)
    , lon_controller_status(0.0)
    , common_stop_time(0.0)
    , common_stop_s(0.0)
    , matched_lon_curvature(0.0)
    , matched_lon_station(0.0)
    , preview_lon_station(0.0)
    , preview_lon_curvature(0.0)
    , reference_lon_curvature(0.0)
    , acceleration_cmd_feedforward(0.0)
    , acceleration_cmd_compensation(0.0)
    , acceleration_cmd_correction(0.0)  {
  (void)_alloc;
    }



   typedef float _station_reference_type;
  _station_reference_type station_reference;

   typedef float _station_error_type;
  _station_error_type station_error;

   typedef float _station_error_limited_type;
  _station_error_limited_type station_error_limited;

   typedef float _preview_station_error_type;
  _preview_station_error_type preview_station_error;

   typedef float _speed_reference_type;
  _speed_reference_type speed_reference;

   typedef float _speed_error_type;
  _speed_error_type speed_error;

   typedef float _speed_controller_input_limited_type;
  _speed_controller_input_limited_type speed_controller_input_limited;

   typedef float _preview_speed_reference_type;
  _preview_speed_reference_type preview_speed_reference;

   typedef float _preview_speed_error_type;
  _preview_speed_error_type preview_speed_error;

   typedef float _preview_acceleration_reference_type;
  _preview_acceleration_reference_type preview_acceleration_reference;

   typedef float _acceleration_cmd_closeloop_type;
  _acceleration_cmd_closeloop_type acceleration_cmd_closeloop;

   typedef float _acceleration_cmd_type;
  _acceleration_cmd_type acceleration_cmd;

   typedef float _acceleration_lookup_type;
  _acceleration_lookup_type acceleration_lookup;

   typedef float _speed_lookup_type;
  _speed_lookup_type speed_lookup;

   typedef float _calibration_value_type;
  _calibration_value_type calibration_value;

   typedef float _throttle_cmd_type;
  _throttle_cmd_type throttle_cmd;

   typedef float _brake_cmd_type;
  _brake_cmd_type brake_cmd;

   typedef uint8_t _is_full_stop_type;
  _is_full_stop_type is_full_stop;

   typedef float _slope_offset_compensation_type;
  _slope_offset_compensation_type slope_offset_compensation;

   typedef float _current_station_type;
  _current_station_type current_station;

   typedef float _path_remain_type;
  _path_remain_type path_remain;

   typedef float _auto_model_time_type;
  _auto_model_time_type auto_model_time;

   typedef float _gear_position_type;
  _gear_position_type gear_position;

   typedef uint8_t _is_common_stop_type;
  _is_common_stop_type is_common_stop;

   typedef float _current_acc_type;
  _current_acc_type current_acc;

   typedef float _filtered_acc_type;
  _filtered_acc_type filtered_acc;

   typedef float _lon_controller_status_type;
  _lon_controller_status_type lon_controller_status;

   typedef float _common_stop_time_type;
  _common_stop_time_type common_stop_time;

   typedef float _common_stop_s_type;
  _common_stop_s_type common_stop_s;

   typedef float _matched_lon_curvature_type;
  _matched_lon_curvature_type matched_lon_curvature;

   typedef float _matched_lon_station_type;
  _matched_lon_station_type matched_lon_station;

   typedef float _preview_lon_station_type;
  _preview_lon_station_type preview_lon_station;

   typedef float _preview_lon_curvature_type;
  _preview_lon_curvature_type preview_lon_curvature;

   typedef float _reference_lon_curvature_type;
  _reference_lon_curvature_type reference_lon_curvature;

   typedef float _acceleration_cmd_feedforward_type;
  _acceleration_cmd_feedforward_type acceleration_cmd_feedforward;

   typedef float _acceleration_cmd_compensation_type;
  _acceleration_cmd_compensation_type acceleration_cmd_compensation;

   typedef float _acceleration_cmd_correction_type;
  _acceleration_cmd_correction_type acceleration_cmd_correction;





  typedef boost::shared_ptr< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleLonDebug_

typedef ::roscpp_tutorials::SimpleLonDebug_<std::allocator<void> > SimpleLonDebug;

typedef boost::shared_ptr< ::roscpp_tutorials::SimpleLonDebug > SimpleLonDebugPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::SimpleLonDebug const> SimpleLonDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da9ef36f8a157e7047f558ab5040c28b";
  }

  static const char* value(const ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda9ef36f8a157e70ULL;
  static const uint64_t static_value2 = 0x47f558ab5040c28bULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/SimpleLonDebug";
  }

  static const char* value(const ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 station_reference\n\
float32 station_error\n\
float32 station_error_limited\n\
float32 preview_station_error\n\
float32 speed_reference\n\
float32 speed_error\n\
float32 speed_controller_input_limited\n\
float32 preview_speed_reference\n\
float32 preview_speed_error\n\
float32 preview_acceleration_reference\n\
float32 acceleration_cmd_closeloop\n\
float32 acceleration_cmd\n\
float32 acceleration_lookup\n\
float32 speed_lookup\n\
float32 calibration_value\n\
float32 throttle_cmd\n\
float32 brake_cmd\n\
bool is_full_stop\n\
float32 slope_offset_compensation\n\
float32 current_station\n\
float32 path_remain\n\
float32 auto_model_time\n\
float32 gear_position\n\
bool is_common_stop\n\
float32 current_acc\n\
float32 filtered_acc\n\
float32 lon_controller_status\n\
float32 common_stop_time\n\
float32 common_stop_s\n\
float32 matched_lon_curvature\n\
float32 matched_lon_station\n\
float32 preview_lon_station\n\
float32 preview_lon_curvature\n\
float32 reference_lon_curvature  \n\
float32 acceleration_cmd_feedforward\n\
float32 acceleration_cmd_compensation\n\
float32 acceleration_cmd_correction\n\
";
  }

  static const char* value(const ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.station_reference);
      stream.next(m.station_error);
      stream.next(m.station_error_limited);
      stream.next(m.preview_station_error);
      stream.next(m.speed_reference);
      stream.next(m.speed_error);
      stream.next(m.speed_controller_input_limited);
      stream.next(m.preview_speed_reference);
      stream.next(m.preview_speed_error);
      stream.next(m.preview_acceleration_reference);
      stream.next(m.acceleration_cmd_closeloop);
      stream.next(m.acceleration_cmd);
      stream.next(m.acceleration_lookup);
      stream.next(m.speed_lookup);
      stream.next(m.calibration_value);
      stream.next(m.throttle_cmd);
      stream.next(m.brake_cmd);
      stream.next(m.is_full_stop);
      stream.next(m.slope_offset_compensation);
      stream.next(m.current_station);
      stream.next(m.path_remain);
      stream.next(m.auto_model_time);
      stream.next(m.gear_position);
      stream.next(m.is_common_stop);
      stream.next(m.current_acc);
      stream.next(m.filtered_acc);
      stream.next(m.lon_controller_status);
      stream.next(m.common_stop_time);
      stream.next(m.common_stop_s);
      stream.next(m.matched_lon_curvature);
      stream.next(m.matched_lon_station);
      stream.next(m.preview_lon_station);
      stream.next(m.preview_lon_curvature);
      stream.next(m.reference_lon_curvature);
      stream.next(m.acceleration_cmd_feedforward);
      stream.next(m.acceleration_cmd_compensation);
      stream.next(m.acceleration_cmd_correction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleLonDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::SimpleLonDebug_<ContainerAllocator>& v)
  {
    s << indent << "station_reference: ";
    Printer<float>::stream(s, indent + "  ", v.station_reference);
    s << indent << "station_error: ";
    Printer<float>::stream(s, indent + "  ", v.station_error);
    s << indent << "station_error_limited: ";
    Printer<float>::stream(s, indent + "  ", v.station_error_limited);
    s << indent << "preview_station_error: ";
    Printer<float>::stream(s, indent + "  ", v.preview_station_error);
    s << indent << "speed_reference: ";
    Printer<float>::stream(s, indent + "  ", v.speed_reference);
    s << indent << "speed_error: ";
    Printer<float>::stream(s, indent + "  ", v.speed_error);
    s << indent << "speed_controller_input_limited: ";
    Printer<float>::stream(s, indent + "  ", v.speed_controller_input_limited);
    s << indent << "preview_speed_reference: ";
    Printer<float>::stream(s, indent + "  ", v.preview_speed_reference);
    s << indent << "preview_speed_error: ";
    Printer<float>::stream(s, indent + "  ", v.preview_speed_error);
    s << indent << "preview_acceleration_reference: ";
    Printer<float>::stream(s, indent + "  ", v.preview_acceleration_reference);
    s << indent << "acceleration_cmd_closeloop: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_cmd_closeloop);
    s << indent << "acceleration_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_cmd);
    s << indent << "acceleration_lookup: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_lookup);
    s << indent << "speed_lookup: ";
    Printer<float>::stream(s, indent + "  ", v.speed_lookup);
    s << indent << "calibration_value: ";
    Printer<float>::stream(s, indent + "  ", v.calibration_value);
    s << indent << "throttle_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_cmd);
    s << indent << "brake_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.brake_cmd);
    s << indent << "is_full_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_full_stop);
    s << indent << "slope_offset_compensation: ";
    Printer<float>::stream(s, indent + "  ", v.slope_offset_compensation);
    s << indent << "current_station: ";
    Printer<float>::stream(s, indent + "  ", v.current_station);
    s << indent << "path_remain: ";
    Printer<float>::stream(s, indent + "  ", v.path_remain);
    s << indent << "auto_model_time: ";
    Printer<float>::stream(s, indent + "  ", v.auto_model_time);
    s << indent << "gear_position: ";
    Printer<float>::stream(s, indent + "  ", v.gear_position);
    s << indent << "is_common_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_common_stop);
    s << indent << "current_acc: ";
    Printer<float>::stream(s, indent + "  ", v.current_acc);
    s << indent << "filtered_acc: ";
    Printer<float>::stream(s, indent + "  ", v.filtered_acc);
    s << indent << "lon_controller_status: ";
    Printer<float>::stream(s, indent + "  ", v.lon_controller_status);
    s << indent << "common_stop_time: ";
    Printer<float>::stream(s, indent + "  ", v.common_stop_time);
    s << indent << "common_stop_s: ";
    Printer<float>::stream(s, indent + "  ", v.common_stop_s);
    s << indent << "matched_lon_curvature: ";
    Printer<float>::stream(s, indent + "  ", v.matched_lon_curvature);
    s << indent << "matched_lon_station: ";
    Printer<float>::stream(s, indent + "  ", v.matched_lon_station);
    s << indent << "preview_lon_station: ";
    Printer<float>::stream(s, indent + "  ", v.preview_lon_station);
    s << indent << "preview_lon_curvature: ";
    Printer<float>::stream(s, indent + "  ", v.preview_lon_curvature);
    s << indent << "reference_lon_curvature: ";
    Printer<float>::stream(s, indent + "  ", v.reference_lon_curvature);
    s << indent << "acceleration_cmd_feedforward: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_cmd_feedforward);
    s << indent << "acceleration_cmd_compensation: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_cmd_compensation);
    s << indent << "acceleration_cmd_correction: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration_cmd_correction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_SIMPLELONDEBUG_H
