// Generated by gencpp from file roscpp_tutorials/TrafficLightDetection.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTION_H
#define ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/Box2d.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct TrafficLightDetection_
{
  typedef TrafficLightDetection_<ContainerAllocator> Type;

  TrafficLightDetection_()
    : box()
    , yuv_data()
    , track_id(0)
    , tracking_time(0.0)  {
    }
  TrafficLightDetection_(const ContainerAllocator& _alloc)
    : box(_alloc)
    , yuv_data(_alloc)
    , track_id(0)
    , tracking_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::Box2d_<ContainerAllocator>  _box_type;
  _box_type box;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _yuv_data_type;
  _yuv_data_type yuv_data;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef float _tracking_time_type;
  _tracking_time_type tracking_time;





  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightDetection_

typedef ::roscpp_tutorials::TrafficLightDetection_<std::allocator<void> > TrafficLightDetection;

typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetection > TrafficLightDetectionPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetection const> TrafficLightDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04679ffb59fd3f5c5c9fa1c0dfb2078c";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04679ffb59fd3f5cULL;
  static const uint64_t static_value2 = 0x5c9fa1c0dfb2078cULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/TrafficLightDetection";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Box2d box\n\
uint8[] yuv_data\n\
int32 track_id\n\
float32 tracking_time\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Box2d\n\
  int64 x\n\
  int64 y\n\
  int64 w\n\
  int64 h\n\
";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box);
      stream.next(m.yuv_data);
      stream.next(m.track_id);
      stream.next(m.tracking_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator>& v)
  {
    s << indent << "box: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Box2d_<ContainerAllocator> >::stream(s, indent + "  ", v.box);
    s << indent << "yuv_data[]" << std::endl;
    for (size_t i = 0; i < v.yuv_data.size(); ++i)
    {
      s << indent << "  yuv_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.yuv_data[i]);
    }
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "tracking_time: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTION_H
