// Generated by gencpp from file roscpp_tutorials/TrafficLightDetections.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTIONS_H
#define ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/MsgHeader.h>
#include <roscpp_tutorials/TrafficLightDetection.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct TrafficLightDetections_
{
  typedef TrafficLightDetections_<ContainerAllocator> Type;

  TrafficLightDetections_()
    : header()
    , sensor_id()
    , detections()
    , image_width(0)
    , image_height(0)  {
    }
  TrafficLightDetections_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_id(_alloc)
    , detections(_alloc)
    , image_width(0)
    , image_height(0)  {
  (void)_alloc;
    }



   typedef  ::roscpp_tutorials::MsgHeader_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::vector< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >::other >  _detections_type;
  _detections_type detections;

   typedef int16_t _image_width_type;
  _image_width_type image_width;

   typedef int16_t _image_height_type;
  _image_height_type image_height;





  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightDetections_

typedef ::roscpp_tutorials::TrafficLightDetections_<std::allocator<void> > TrafficLightDetections;

typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetections > TrafficLightDetectionsPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::TrafficLightDetections const> TrafficLightDetectionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "144360abc44a8b006069b36746e17f86";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x144360abc44a8b00ULL;
  static const uint64_t static_value2 = 0x6069b36746e17f86ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/TrafficLightDetections";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MsgHeader header\n\
    \n\
string sensor_id\n\
    \n\
TrafficLightDetection[] detections\n\
\n\
int16 image_width\n\
\n\
int16 image_height\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/MsgHeader\n\
uint64 timestamp\n\
uint64 sequence_num\n\
uint16 module_name\n\
uint16 status\n\
uint64 is_debag\n\
uint64 measured_timestamp\n\
uint8[3] version\n\
uint64 token\n\
uint64 token_timestamp\n\
string detail\n\
\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/TrafficLightDetection\n\
Box2d box\n\
uint8[] yuv_data\n\
int32 track_id\n\
float32 tracking_time\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Box2d\n\
  int64 x\n\
  int64 y\n\
  int64 w\n\
  int64 h\n\
";
  }

  static const char* value(const ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_id);
      stream.next(m.detections);
      stream.next(m.image_width);
      stream.next(m.image_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightDetections_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::TrafficLightDetections_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::MsgHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_id);
    s << indent << "detections[]" << std::endl;
    for (size_t i = 0; i < v.detections.size(); ++i)
    {
      s << indent << "  detections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::TrafficLightDetection_<ContainerAllocator> >::stream(s, indent + "    ", v.detections[i]);
    }
    s << indent << "image_width: ";
    Printer<int16_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int16_t>::stream(s, indent + "  ", v.image_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_TRAFFICLIGHTDETECTIONS_H
