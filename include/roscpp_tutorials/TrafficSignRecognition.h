// Generated by gencpp from file roscpp_tutorials/TrafficSignRecognition.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_TRAFFICSIGNRECOGNITION_H
#define ROSCPP_TUTORIALS_MESSAGE_TRAFFICSIGNRECOGNITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/Box2d.h>
#include <roscpp_tutorials/Box3d.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct TrafficSignRecognition_
{
  typedef TrafficSignRecognition_<ContainerAllocator> Type;

  TrafficSignRecognition_()
    : id(0)
    , type(0)
    , text()
    , value(0.0)
    , confidence(0.0)
    , tracking_time(0.0)
    , box_2d()
    , box_3d()  {
    }
  TrafficSignRecognition_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , text(_alloc)
    , value(0.0)
    , confidence(0.0)
    , tracking_time(0.0)
    , box_2d(_alloc)
    , box_3d(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef float _value_type;
  _value_type value;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef  ::roscpp_tutorials::Box2d_<ContainerAllocator>  _box_2d_type;
  _box_2d_type box_2d;

   typedef  ::roscpp_tutorials::Box3d_<ContainerAllocator>  _box_3d_type;
  _box_3d_type box_3d;





  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficSignRecognition_

typedef ::roscpp_tutorials::TrafficSignRecognition_<std::allocator<void> > TrafficSignRecognition;

typedef boost::shared_ptr< ::roscpp_tutorials::TrafficSignRecognition > TrafficSignRecognitionPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::TrafficSignRecognition const> TrafficSignRecognitionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "104ada8d287c66c01f83ff25feca0834";
  }

  static const char* value(const ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x104ada8d287c66c0ULL;
  static const uint64_t static_value2 = 0x1f83ff25feca0834ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/TrafficSignRecognition";
  }

  static const char* value(const ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 type\n\
string text\n\
float32 value\n\
float32 confidence\n\
float32 tracking_time\n\
Box2d box_2d\n\
Box3d box_3d\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Box2d\n\
  int64 x\n\
  int64 y\n\
  int64 w\n\
  int64 h\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Box3d\n\
  Point3d position\n\
  float32 l\n\
  float32 w\n\
  float32 h\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.text);
      stream.next(m.value);
      stream.next(m.confidence);
      stream.next(m.tracking_time);
      stream.next(m.box_2d);
      stream.next(m.box_3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficSignRecognition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::TrafficSignRecognition_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "tracking_time: ";
    Printer<float>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "box_2d: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Box2d_<ContainerAllocator> >::stream(s, indent + "  ", v.box_2d);
    s << indent << "box_3d: ";
    s << std::endl;
    Printer< ::roscpp_tutorials::Box3d_<ContainerAllocator> >::stream(s, indent + "  ", v.box_3d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_TRAFFICSIGNRECOGNITION_H
