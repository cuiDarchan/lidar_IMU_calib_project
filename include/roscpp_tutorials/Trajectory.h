// Generated by gencpp from file roscpp_tutorials/Trajectory.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_TRAJECTORY_H
#define ROSCPP_TUTORIALS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <roscpp_tutorials/TrajectoryPoint.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : probability(0.0)
    , trajectory_points()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : probability(0.0)
    , trajectory_points(_alloc)  {
  (void)_alloc;
    }



   typedef float _probability_type;
  _probability_type probability;

   typedef std::vector< ::roscpp_tutorials::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::roscpp_tutorials::TrajectoryPoint_<ContainerAllocator> >::other >  _trajectory_points_type;
  _trajectory_points_type trajectory_points;





  typedef boost::shared_ptr< ::roscpp_tutorials::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::roscpp_tutorials::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::roscpp_tutorials::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4a2eccb96e308f549c7be9b6b800654";
  }

  static const char* value(const ::roscpp_tutorials::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4a2eccb96e308f5ULL;
  static const uint64_t static_value2 = 0x49c7be9b6b800654ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/Trajectory";
  }

  static const char* value(const ::roscpp_tutorials::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 probability\n\
TrajectoryPoint[] trajectory_points\n\
================================================================================\n\
MSG: roscpp_tutorials/TrajectoryPoint\n\
PathPoint path_point\n\
float32 v\n\
float32 a\n\
float32 relative_time\n\
float32 da\n\
================================================================================\n\
MSG: roscpp_tutorials/PathPoint\n\
Point3d position\n\
float32 theta\n\
float32 kappa\n\
float32 s\n\
float32 dkappa\n\
float32 ddkappa\n\
\n\
================================================================================\n\
MSG: roscpp_tutorials/Point3d\n\
	float32 x  # in meters or m/s\n\
	float32 y  # in meters or m/s\n\
	float32 z  # height in meters or m/s\n\
";
  }

  static const char* value(const ::roscpp_tutorials::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probability);
      stream.next(m.trajectory_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
    s << indent << "trajectory_points[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_points.size(); ++i)
    {
      s << indent << "  trajectory_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roscpp_tutorials::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_TRAJECTORY_H
