// Generated by gencpp from file roscpp_tutorials/VideoEncodedData.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_VIDEOENCODEDDATA_H
#define ROSCPP_TUTORIALS_MESSAGE_VIDEOENCODEDDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct VideoEncodedData_
{
  typedef VideoEncodedData_<ContainerAllocator> Type;

  VideoEncodedData_()
    : header()
    , sensor_id()
    , video_format()
    , frame_type(0)
    , data_size(0)
    , raw_data()
    , cipv(0)  {
    }
  VideoEncodedData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_id(_alloc)
    , video_format(_alloc)
    , frame_type(0)
    , data_size(0)
    , raw_data(_alloc)
    , cipv(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _video_format_type;
  _video_format_type video_format;

   typedef int32_t _frame_type_type;
  _frame_type_type frame_type;

   typedef int32_t _data_size_type;
  _data_size_type data_size;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _raw_data_type;
  _raw_data_type raw_data;

   typedef int16_t _cipv_type;
  _cipv_type cipv;





  typedef boost::shared_ptr< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> const> ConstPtr;

}; // struct VideoEncodedData_

typedef ::roscpp_tutorials::VideoEncodedData_<std::allocator<void> > VideoEncodedData;

typedef boost::shared_ptr< ::roscpp_tutorials::VideoEncodedData > VideoEncodedDataPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::VideoEncodedData const> VideoEncodedDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d6a0047bbc617147b1b957901881c16";
  }

  static const char* value(const ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d6a0047bbc61714ULL;
  static const uint64_t static_value2 = 0x7b1b957901881c16ULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/VideoEncodedData";
  }

  static const char* value(const ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string sensor_id\n\
string video_format\n\
int32 frame_type\n\
int32 data_size\n\
uint8[] raw_data\n\
int16 cipv\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_id);
      stream.next(m.video_format);
      stream.next(m.frame_type);
      stream.next(m.data_size);
      stream.next(m.raw_data);
      stream.next(m.cipv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VideoEncodedData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::VideoEncodedData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_id);
    s << indent << "video_format: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.video_format);
    s << indent << "frame_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frame_type);
    s << indent << "data_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.data_size);
    s << indent << "raw_data[]" << std::endl;
    for (size_t i = 0; i < v.raw_data.size(); ++i)
    {
      s << indent << "  raw_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.raw_data[i]);
    }
    s << indent << "cipv: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cipv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_VIDEOENCODEDDATA_H
