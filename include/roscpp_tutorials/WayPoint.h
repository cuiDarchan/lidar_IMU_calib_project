// Generated by gencpp from file roscpp_tutorials/WayPoint.msg
// DO NOT EDIT!


#ifndef ROSCPP_TUTORIALS_MESSAGE_WAYPOINT_H
#define ROSCPP_TUTORIALS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roscpp_tutorials
{
template <class ContainerAllocator>
struct WayPoint_
{
  typedef WayPoint_<ContainerAllocator> Type;

  WayPoint_()
    : position()
    , has_orientation(false)
    , orientation()  {
      position.assign(0.0);

      orientation.assign(0.0);
  }
  WayPoint_(const ContainerAllocator& _alloc)
    : position()
    , has_orientation(false)
    , orientation()  {
  (void)_alloc;
      position.assign(0.0);

      orientation.assign(0.0);
  }



   typedef boost::array<double, 3>  _position_type;
  _position_type position;

   typedef uint8_t _has_orientation_type;
  _has_orientation_type has_orientation;

   typedef boost::array<double, 4>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::roscpp_tutorials::WayPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roscpp_tutorials::WayPoint_<ContainerAllocator> const> ConstPtr;

}; // struct WayPoint_

typedef ::roscpp_tutorials::WayPoint_<std::allocator<void> > WayPoint;

typedef boost::shared_ptr< ::roscpp_tutorials::WayPoint > WayPointPtr;
typedef boost::shared_ptr< ::roscpp_tutorials::WayPoint const> WayPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roscpp_tutorials::WayPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roscpp_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp_tutorials': ['/home/cui-dell/catkin_ws/src/roscpp_tutorials/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roscpp_tutorials::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roscpp_tutorials::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roscpp_tutorials::WayPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dba5037889e3798d0d42fba3c9b126cf";
  }

  static const char* value(const ::roscpp_tutorials::WayPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdba5037889e3798dULL;
  static const uint64_t static_value2 = 0x0d42fba3c9b126cfULL;
};

template<class ContainerAllocator>
struct DataType< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roscpp_tutorials/WayPoint";
  }

  static const char* value(const ::roscpp_tutorials::WayPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
  float64[3] position\n\
  bool has_orientation\n\
  float64[4] orientation\n\
\n\
";
  }

  static const char* value(const ::roscpp_tutorials::WayPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.has_orientation);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roscpp_tutorials::WayPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roscpp_tutorials::WayPoint_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "has_orientation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_orientation);
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSCPP_TUTORIALS_MESSAGE_WAYPOINT_H
